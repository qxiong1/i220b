Script started on 2019-09-26 14:56:31-04:00 [TERM="xterm-256color" TTY="/dev/pts/17" COLUMNS="80" LINES="24"]
qxiong1@remote05:~/i220b/work/lab6$ ls
brk  bug-program  lab6.log  process-memory
qxiong1@remote05:~/i220b/work/lab6$ cd process-memory/
qxiong1@remote05:~/i220b/work/lab6/process-memory$ ls
Makefile  process-memory.c
qxiong1@remote05:~/i220b/work/lab6/process-memory$ make
cc -g -Wall -std=c11 -O1    process-memory.c   -o process-memory
qxiong1@remote05:~/i220b/work/lab6/process-memory$ /.[K[K./process-memory 10 &.
[1] 12845
bash: .: filename argument required
.: usage: . filename [arguments]
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7f91ce4f1010

qxiong1@remote05:~/i220b/work/lab6/process-memory$ \[K./process-memory 10 &.
[2] 13002
bash: .: filename argument required
.: usage: . filename [arguments]
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7fd6304c6010

qxiong1@remote05:~/i220b/work/lab6/process-memory$ ./process-memory 10 &.[K
[3] 13052
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7f5517af7010

qxiong1@remote05:~/i220b/work/lab6/process-memory$ clear
[H[2J[3Jqxiong1@remote05:~/i220b/work/lab6/process-memory$ clear./process-memory 10 &
[4] 13072
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7f3ede6dd010
pid
bash: pid: command not found
[1]   Done                    ./process-memory 10
[2]   Done                    ./process-memory 10
[3]-  Done                    ./process-memory 10
[4]+  Done                    ./process-memory 10
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 
qxiong1@remote05:~/i220b/work/lab6/process-memory$ pid./process-memory 10 &.
[1] 13470
bash: .: filename argument required
.: usage: . filename [arguments]
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7fb257197010
pid
bash: pid: command not found
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 
qxiong1@remote05:~/i220b/work/lab6/process-memory$ pid./process-memory 10 &.[K
[2] 13517
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7f16d312d010
ps -Fp PID
error: process ID list syntax error

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
qxiong1@remote05:~/i220b/work/lab6/process-memory$ ps -Fp PID[K[K[K[K[K[K[K[K[K[K./process-memory 10 &pid[K./process-memory 10 &
[3] 13593
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7f87aa42d010
ps -Fo[Kp
error: list of process IDs must follow -p

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
qxiong1@remote05:~/i220b/work/lab6/process-memory$ clear
[H[2J[3J[1]   Done                    ./process-memory 10
[2]-  Done                    ./process-memory 10
qxiong1@remote05:~/i220b/work/lab6/process-memory$ clear
[H[2J[3Jqxiong1@remote05:~/i220b/work/lab6/process-memory$ clearps -Fp./process-memory 10 &
[4] 13832
[3]   Done                    ./process-memory 10
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7fe38f18d010
[Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ pid
bash: pid: command not found
qxiong1@remote05:~/i220b/work/lab6/process-memory$ pid./process-memory 10 &clear[K./process-memory 10 & ps -Fp
[5] 14074
10 MB allocated at 0x7f8f16591010
error: list of process IDs must follow -p

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
[4]   Done                    ./process-memory 10
qxiong1@remote05:~/i220b/work/lab6/process-memory$ ./process-memory 10 & ps -Fppid[K./process-memory 10 &
[6] 14105
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7f30beb6f010
ps -Fp
error: list of process IDs must follow -p

Usage:
 ps [options]

 Try 'ps --help <simple|list|output|threads|misc|all>'
  or 'ps --help <s|l|o|t|m|a>'
 for additional help text.

For more details see ps(1).
qxiong1@remote05:~/i220b/work/lab6/process-memory$ p[KPID
bash: PID: command not found
qxiong1@remote05:~/i220b/work/lab6/process-memory$ PIDps -Fp./process-memory 10 &
[7] 14170
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7ff245cdf010
PID
bash: PID: command not found
qxiong1@remote05:~/i220b/work/lab6/process-memory$ PID./process-memory 10 &
[8] 14189
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7f96edc78010
pid
bash: pid: command not found
qxiong1@remote05:~/i220b/work/lab6/process-memory$ pid./process-memory 10 &0 &
[9] 14253
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 100 MB allocated at 0x7f6c6e3df010
cd ..[K[K[K[K[K[Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ [Kqxiong1@remote05:~/i220b/work/lab6/process-memory$ cd ..[K[K[K[K[Kmake
make: Nothing to be done for 'all'.
[5]   Done                    ./process-memory 10
[6]   Done                    ./process-memory 10
[7]   Done                    ./process-memory 10
[8]-  Done                    ./process-memory 10
[9]+  Done                    ./process-memory 100
qxiong1@remote05:~/i220b/work/lab6/process-memory$ ma[K[Kclear
[H[2J[3Jqxiong1@remote05:~/i220b/work/lab6/process-memory$ ./process-memory 
usage: ./process-memory NUM_MB
qxiong1@remote05:~/i220b/work/lab6/process-memory$ ./process-memory clear[K[1Pmake./process-memory 100 &pid[K./process-memory 100 &[C[1P &
[1] 18774
qxiong1@remote05:~/i220b/work/lab6/process-memory$ 10 MB allocated at 0x7efc78491010

qxiong1@remote05:~/i220b/work/lab6/process-memory$ cd ..
qxiong1@remote05:~/i220b/work/lab6$ cd [K[K[Kcd bug-program/
qxiong1@remote05:~/i220b/work/lab6/bug-program$ ls
bug-program.c  Makefile
qxiong1@remote05:~/i220b/work/lab6/bug-program$ vim bug-program.c 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[24;1H"bug-program.c" 76L, 2199C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m[24;63H1,1[11CTop[1;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;1H[K[24;63H9,1[12C5%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H12,0-1[8C11%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m[24;63H[K[24;63H15,1[10C16%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hkv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;[24;63H[K[24;63H18,1[10C22%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Free all the key-value's in keyValues. */[m[24;63H[K[24;63H21,1[10C28%[6;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[24;63H[K[24;63H21,1[10C22%[9;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};[24;63H[K[24;63H21,1[10C16%[12;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m[24;63H[K[24;63H21,1[10C11%[15;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[24;63H[K[24;63H21,1[11C5%[18;1H[?25h[?25l[24;64H0,5[17;5H[?25h[?25l[24;53H2[17;6H[34m[47ma[m[24;1H[1m-- VISUAL --[m[24;53H[K[17;6H[24;63H20,6[11C5%[17;6H[?25h[?25l[24;53H4[17;8H[34m[47mll[m[24;66H8[17;8H[?25h[?25l[24;53H5[17;9H[34m[47mo[m[24;66H9[17;9H[?25h[?25l[24;53H6[17;10H[34m[47mc[m[24;66H10[17;10H[?25h[?25l[24;53H7[17;11H[34m[47ma[m[24;67H1[17;11H[?25h[?25l[24;53H8[17;12H[34m[47mt[m[24;67H2[17;12H[?25h[?25l[24;53H10[17;14H[34m[47me [m[24;67H4[17;14H[?25h[?25l[24;54H2[17;16H[34m[47mst[m[24;67H6[17;16H[?25h[?25l[24;53H2 [18;16H[17;16H[34m[47morage for new KeyValue struct[m[47m 
  [m[32m[47mstruct[m[47m KeyVal[m[24;64H1[18;16H[?25h[?25lu[47mu[m[24;67H7[18;17H[?25h[?25le[47me[m[24;67H8[18;18H[?25h[?25l [47m [m[24;67H9[18;19H[?25h[?25l*[47m*[m[24;66H20[18;20H[?25h[?25l[24;53H18[17;22H[34mfor new KeyValue struct[m[17;45H[K[18;1H  [32mstruct[m KeyValue *[24;64H0,22[17;22H[?25h[?25l[24;54H9[17;23H[34m[47mf[m[24;67H3[17;23H[?25h[?25l[24;53H20[17;24H[34m[47mo[m[24;67H4[17;24H[?25h[?25l[24;54H1[17;25H[34m[47mr[m[24;67H5[17;25H[?25h[?25l[24;54H2[17;26H[34m[47m [m[24;67H6[17;26H[?25h[?25l[24;54H4[17;28H[34m[47mne[m[24;67H8[17;28H[?25h[?25l[24;53H31[17;35H[17;28H[34m[47mw KeyVa[m[24;66H35[17;35H[?25h[?25l[24;54H2[17;36H[34m[47ml[m[24;67H6[17;36H[?25h[?25l[24;54H3[17;37H[34m[47mu[m[24;67H7[17;37H[?25h[?25l[24;54H4[17;38H[34m[47me[m[24;67H8[17;38H[?25h[?25l[24;54H5[17;39H[34m[47m [m[24;67H9[17;39H[?25h[?25l[24;54H7[17;41H[34m[47mst[m[24;66H41[17;41H[?25h[?25l[24;54H8[17;42H[34m[47mr[m[24;67H2[17;42H[?25h[?25l[24;54H9[17;43H[34m[47mu[m[24;67H3[17;43H[?25h[?25l[24;53H40[17;44H[34m[47mc[m[24;67H4[17;44H[?25h[?25l[24;54H1[17;45H[34m[47mt[m[24;67H5[17;45H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[24;53H  [17;44H[17;5H[34mallocate storage for new KeyValue struct[m[24;1H[K[24;63H20,44[10C5%[17;44H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H20,44[9C11%[14;44H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m[24;63H[K[24;63H20,44[9C16%[11;44H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hkv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;[24;63H[K[24;63H20,44[9C22%[8;44H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Free all the key-value's in keyValues. */[m[24;63H[K[24;63H21,52[9C28%[6;52H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{[24;63H[K[24;63H24,30[9C33%[6;30H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m[24;63H[K[24;63H27,52[9C39%[6;52H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H}
}[24;63H[K[24;63H30,52[9C45%[6;52H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[24;63H[K[24;63H33,51[9C50%[6;51H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {[24;63H[K[24;63H36,1[10C56%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,[24;63H[K[24;63H39,11[9C62%[6;11H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;[24;63H[K[24;63H42,30[9C67%[6;30H[?25h[?25l[1;23r[1;1H[3M[1;24r[4;64H[106m{

[m  [106m}[m[21;3H[38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }[24;63H[K[24;63H45,3[10C73%[6;3H[?25h[?25l[1;23r[1;1H[3M[1;24r[1;64H{

  }[21;3H[38;5;130mreturn[m p;
}[24;63H[K[24;63H48,52[9C79%[6;52H[?25h[?25l[24;63H56,45[14;45H[?25h[?25l[24;53H:[14;45H[24;53H[K[24;1H:[?2004h[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t[24;1H[K[24;1H[?2004l[?1l>[?25h[?1049l[23;0;0t[1]+  Done                    ./process-memory 10  (wd: ~/i220b/work/lab6/process-memory)
(wd now: ~/i220b/work/lab6/bug-program)
qxiong1@remote05:~/i220b/work/lab6/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
qxiong1@remote05:~/i220b/work/lab6/bug-program$ ./bug-program 
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
qxiong1@remote05:~/i220b/work/lab6/bug-program$ ./bug-program make[Kvim bug-program.c 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[24;1H"bug-program.c" 76L, 2199C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;3H}
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;
}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[24;63H56,45[9C83%[12;45H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m[24;1H[K[24;63H56,45[9C77%[15;45H[?25h[?25l[24;63H49,31[8;31H[?25h[?25l[24;63H50,3 [9;3H[?25h[?25l[12;24H[106m{[17;3H}[m[24;64H3,24[12;24H[?25h[?25l{[17;3H}[24;64H0,3 [9;3H[?25h[?25l[1;23r[1;1H[2M[1;24r[23;1H[34m/** Print out all the words in the first verse of Carroll's Jabberwocky[m[24;63H[K[24;63H61,33[9C81%[18;33H[?25h[?25l[1;23r[1;1H[4M[1;24r[20;1H[34m *  paired with their index in the verse.
 */[m
[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();[24;63H[K[24;63H65,0-1[8C88%[18;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }[24;63H[K[24;63H65,0-1[8C94%[15;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hfree_key_values(keyValues);
  [38;5;130mreturn[m [31m0[m;
}[24;63H[K[24;63H65,0-1[8CBot[12;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H65,0-1[8CBot[9;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H65,0-1[8CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H68,3[10CBot[6;3H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H71,34[9CBot[6;34H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H74,29[9CBot[6;29H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H76,1[10CBot[5;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H76,1[10CBot[2;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[94m~                                                                               [m[24;63H[K[24;63H76,1[10CBot[1;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  free_key_values(keyValues);
  [38;5;130mreturn[m [31m0[m;[24;63H[K[24;63H76,1[10CBot[4;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);[24;63H[K[24;63H76,1[10CBot[7;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  paired with their index in the verse.
 */[m
[32mint[m main() {[24;63H[K[24;63H76,1[10CBot[10;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky[m[24;63H[K[24;63H76,1[10CBot[13;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5Hp = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;[24;63H[K[24;63H76,1[10CBot[16;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H};
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {[24;63H[K[24;63H76,1[10CBot[19;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5H[31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[24;63H[K[24;63H76,1[10CBot[22;1H[?25h[?25l[24;53H:[22;1H[24;53H[K[24;1H:[?2004h[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t[24;1H[K[24;1H[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ vim bug-program.c 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[24;1H"bug-program.c" 76L, 2199C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;5H[31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;
}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m
[32mint[m main() [106m{[m
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }
  free_key_values(keyValues);
  [38;5;130mreturn[m [31m0[m;
[106m}[m[24;63H76,1[10CBot[23;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {[19;12H{[24;1H[K[24;63H68,1[10C94%[18;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hfree_key_values(keyValues);
  [38;5;130mreturn[m [31m0[m;
}[24;63H[K[24;63H68,1[10CBot[15;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H68,1[10CBot[12;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H68,1[10CBot[9;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H68,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H71,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H74,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H76,1[10CBot[5;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H76,1[10CBot[2;1H[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[94m~                                                                               [m[24;63H[K[24;63H76,1[10CBot[1;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  free_key_values(keyValues);
  [38;5;130mreturn[m [31m0[m;[24;63H[K[24;63H76,1[10CBot[4;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);[24;63H[K[24;63H76,1[10CBot[7;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  paired with their index in the verse.
 */[m
[32mint[m main() {[24;63H[K[24;63H76,1[10CBot[10;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky[m[24;63H[K[24;63H76,1[10CBot[13;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5Hp = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;[24;63H[K[24;63H76,1[10CBot[16;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H};
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {[24;63H[K[24;63H76,1[10CBot[19;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5H[31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[24;63H[K[24;63H76,1[10CBot[22;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1Hmake_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,[24;63H[K[24;63H69,1[10C96%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *[24;63H[K[24;63H66,1[10C90%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H}

[34m/** Make key-values for all the words in the first verse of Carroll's[m[24;63H[K[24;63H63,1[10C84%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }[24;63H[K[24;63H60,1[10C79%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1Hfree_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m[24;63H[K[24;63H57,1[10C73%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m[24;63H[K[24;63H54,1[10C67%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[38;5;130mreturn[m kv;
}[24;63H[K[24;63H51,1[10C62%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[24;63H[K[24;63H48,1[10C56%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5Hexit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H45,1[10C50%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));[24;63H[K[24;63H42,1[10C45%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));[24;63H[K[24;63H39,1[10C39%[18;1H[?25h[?25l[16;23r[16;1H[3L[1;24r[1;1H[106m{[m[2;26H[34mnew KeyValue struct[m[2;45H[K[3;3H[32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m[5;48H[K[6;3H[32mchar[m *s = malloc(strlen(k));[6;31H[K[7;5H[K[8;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));[9;62H[K[10;5Hexit([31m1[m);
  }[11;4H[K[12;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
[106m}[m[24;63H[K[24;63H36,1[10C33%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{[21;1H}[24;63H[K[24;63H33,1[10C28%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[24;63H[K[24;63H30,1[10C22%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};[24;63H[K[24;63H27,1[10C16%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m[24;63H[K[24;63H24,1[10C11%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[24;63H[K[24;63H21,1[11C5%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H[K[24;63H18,1[11C5%[15;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H18,1[10C11%[12;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m[24;63H[K[24;63H18,1[10C16%[9;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hkv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;[24;63H[K[24;63H18,1[10C22%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Free all the key-value's in keyValues. */[m[24;63H[K[24;63H21,1[10C28%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{[24;63H[K[24;63H24,1[10C33%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m[24;63H[K[24;63H27,1[10C39%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H}
}[24;63H[K[24;63H30,1[10C45%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[24;63H[K[24;63H33,1[10C50%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {[24;63H[K[24;63H36,1[10C56%[6;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5Hexit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H36,1[10C50%[9;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));[24;63H[K[24;63H36,1[10C45%[12;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));[24;63H[K[24;63H36,1[10C39%[15;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));[24;63H[K[24;63H36,1[10C33%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)[24;63H[K[24;63H33,1[10C28%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[24;63H[K[24;63H30,1[10C22%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};[24;63H[K[24;63H27,1[10C16%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m[24;63H[K[24;63H24,1[10C11%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[24;63H[K[24;63H21,1[11C5%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H[K[24;63H18,1[11C5%[15;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H18,1[10C11%[12;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m[24;63H[K[24;63H18,1[10C16%[9;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hkv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;[24;63H[K[24;63H18,1[10C22%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Free all the key-value's in keyValues. */[m[24;63H[K[24;63H21,1[10C28%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{[24;63H[K[24;63H24,1[10C33%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m[24;63H[K[24;63H27,1[10C39%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H}
}[24;63H[K[24;63H30,1[10C45%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[24;63H[K[24;63H33,1[10C50%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {[24;63H[K[24;63H36,1[10C56%[6;1H[?25h[?25l[24;53Hi[6;1H[24;53H [6;1H[24;1H[1m-- INSERT --[m[24;63H[K[24;63H36,1[10C56%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,[24;63H[K[24;63H39,1[10C62%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;[24;63H[K[24;63H42,1[10C67%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }[24;63H[K[24;63H45,1[10C73%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mreturn[m p;
}[24;63H[K[24;63H48,1[10C79%[6;1H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;1H[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m
[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[24;63H[K[24;63H54,1[10C90%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hprintf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }
  free_key_values(keyValues);[24;63H[K[24;63H57,1[10C96%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mreturn[m [31m0[m;
}
[94m~                                                                               [m[24;63H[K[24;63H60,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H63,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H66,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H69,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H72,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H75,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;1H[94m~                                                                               [19;1H~                                                                               [20;1H~                                                                               [21;1H~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H76,1[10CBot[1;1H[?25h[?25l[24;63H[K[24;63H76,1[10CBot[1;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  free_key_values(keyValues);
  [38;5;130mreturn[m [31m0[m;[24;63H[K[24;63H76,1[10CBot[4;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);[24;63H[K[24;63H76,1[10CBot[7;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  paired with their index in the verse.
 */[m
[32mint[m main() {[24;63H[K[24;63H76,1[10CBot[10;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky[m[24;63H[K[24;63H76,1[10CBot[13;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5Hp = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;[24;63H[K[24;63H76,1[10CBot[16;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H};
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {[24;63H[K[24;63H76,1[10CBot[19;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5H[31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[24;63H[K[24;63H76,1[10CBot[22;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1Hmake_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,[24;63H[K[24;63H69,1[10C96%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *[24;63H[K[24;63H66,1[10C90%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H}

[34m/** Make key-values for all the words in the first verse of Carroll's[m[24;63H[K[24;63H63,1[10C84%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }[24;63H[K[24;63H60,1[10C79%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1Hfree_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m[24;63H[K[24;63H57,1[10C73%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m[24;63H[K[24;63H54,1[10C67%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[38;5;130mreturn[m kv;
}[24;63H[K[24;63H51,1[10C62%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[24;63H[K[24;63H48,1[10C56%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5Hexit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H45,1[10C50%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));[24;63H[K[24;63H42,1[10C45%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));[24;63H[K[24;63H39,1[10C39%[18;1H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));[24;63H[K[24;63H33,1[10C28%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[24;63H[K[24;63H30,1[10C22%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};[24;63H[K[24;63H27,1[10C16%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m[24;63H[K[24;63H24,1[10C11%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[24;63H[K[24;63H21,1[11C5%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H[K[24;63H18,1[11C5%[15;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H18,1[10C11%[12;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[24;63H[K[24;63H18,1[11C5%[15;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H18,1[10C11%[12;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m[24;63H[K[24;63H18,1[10C16%[9;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hkv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;[24;63H[K[24;63H18,1[10C22%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Free all the key-value's in keyValues. */[m[24;63H[K[24;63H21,1[10C28%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{[24;63H[K[24;63H24,1[10C33%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m[24;63H[K[24;63H27,1[10C39%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H}
}[24;63H[K[24;63H30,1[10C45%[6;1H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {[24;63H[K[24;63H36,1[10C56%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,[24;63H[K[24;63H39,1[10C62%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;[24;63H[K[24;63H42,1[10C67%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }[24;63H[K[24;63H45,1[10C73%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mreturn[m p;
}[24;63H[K[24;63H48,1[10C79%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m[24;63H[K[24;63H51,1[10C84%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[24;63H[K[24;63H54,1[10C90%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hprintf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }
  free_key_values(keyValues);[24;63H[K[24;63H57,1[10C96%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mreturn[m [31m0[m;
}
[94m~                                                                               [m[24;63H[K[24;63H60,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H63,1[10CBot[6;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5H[31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[24;63H[K[24;63H63,1[10CBot[9;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1Hmake_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,[24;63H[K[24;63H63,1[10C96%[12;1H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *[24;63H[K[24;63H63,1[10C84%[18;1H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1Hfree_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }[24;63H[K[24;63H57,1[10C73%[18;1H[?25h[?25l[1;23r[1;1H[6L[1;24r[2;3H[38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m[24;63H[K[24;63H51,1[10C62%[18;1H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;5Hexit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[24;63H[K[24;63H45,1[10C50%[18;1H[?25h[?25l[1;23r[1;1H[6L[1;24r[2;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));[24;63H[K[24;63H39,1[10C39%[18;1H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));[24;63H[K[24;63H33,1[10C28%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[24;63H[K[24;63H30,1[10C22%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};[24;63H[K[24;63H27,1[10C16%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m[24;63H[K[24;63H24,1[10C11%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[24;63H[K[24;63H21,1[11C5%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[24;63H[K[24;63H18,1[10CTop[18;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H[K[24;63H21,57[10C5%[18;31H[106m([25C)[?25h[?25l [m); [106m)[m[24;67H8[18;58H[?25h[?25l[106m+[m);+[106m)[m[24;67H9[18;59H[?25h[?25l[106m [m); [106m)[m[24;66H60[18;60H[?25h[?25l[31m[106m1[m);[31m1[m[106m)[m[24;67H1[18;61H[?25h[?25l[18;31H([6C[106m([17C)[m[4C)[24;66H38[18;38H[?25h[?25lsizeo([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;62H[K[18;37H[106m([m[32ms[m[16C[106m)[m [24;67H7[18;37H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;61H[K[18;36H[106m([m[32ms[m[16C[106m)[m [24;67H6[18;36H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;60H[K[18;35H[106m([m[32ms[m[16C[106m)[m [24;67H5[18;35H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;59H[K[18;34H[106m([m[32ms[m[16C[106m)[m [24;67H4[18;34H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;58H[K[18;33H[106m([m[32ms[m[16C[106m)[m [24;67H3[18;33H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;57H[K[18;32H[106m([m[32ms[m[16C[106m)[m [24;67H2[18;32H[?25h[?25l[106ms[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;32Hs[106m([m[16C*[106m)[m[24;67H3[18;33H[?25h[?25l[106mt[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;33Ht[106m([m[16C*[106m)[m[24;67H4[18;34H[?25h[?25l[106mr[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;34Hr[106m([m[16C*[106m)[m[24;67H5[18;35H[?25h[?25l[106ml[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;35Hl[106m([m[16C*[106m)[m[24;67H6[18;36H[?25h[?25l[106me[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;36He[106m([m[16C*[106m)[m[24;67H7[18;37H[?25h[?25l[106mn[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;37Hn[106m([m[16C*[106m)[m[24;67H8[18;38H[?25h[24;1H[K[18;37H[?25l[24;53H^[[18;37H[24;53H  [18;38H([17C)[24;63H21,37[10C5%[18;37H[?25h[?25l[24;53H:[18;37H[24;53H[K[24;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 76L, 2203C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
[01m[Kbug-program.c:[m[K In function â€˜[01m[Kadd_key_value[m[Kâ€™:
[01m[Kbug-program.c:21:39:[m[K [01;31m[Kerror: [m[Kexpected expression before â€˜[01m[Kstruct[m[Kâ€™
   struct KeyValue *kv = malloc(strlen([01;31m[Kstruct[m[K KeyValue *) + 1);
                                       [01;31m[K^~~~~~[m[K
make: *** [<builtin>: bug-program] Error 1
qxiong1@remote05:~/i220b/work/lab6/bug-program$ vim bug-program
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[24;1H"bug-program" [noeol][converted] 13L, 22941C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[34m^?[mELF[34m^B^A^A^@^@^@^@^@^@^@^@^@^C^@[m>[34m^@^A^@^@^@[mÃ€[34m^P^@^@^@^@^@^@[m@[34m^@^@^@^@^@^@^@^P[mM[34m^@^^[2;1H@^@^@^@^@^@^@^@^@[m@[34m^@[m8[34m^@^K^@[m@[34m^@[m%[34m^@[m$[34m^@^F^@^@^@^D^@^@^@[m@[34m^@^@^@^@^@^@^@[m@[34m^@^@^@^@^@^@@[3;1H^@[m@[34m^@^@^@^@^@^@^@[mh[34m^B^@^@^@^@^@^@[mh[34m^B^@^@^@^@^@^@^H^@^@^@^@^@^@^@^C^@^@^@^D^@^@^@[mÂ¨[3;80HÂ¨ [4;1H[34m^B^@^@^@^@^@^@[mÂ¨[4;16H[34m^B^@^@^@^@^@^@[mÂ¨[4;31H[34m^B^@^@^@^@^@^@^\^@^@^@^@^@^@^@^\^@^@^@^@^@^@^@^A^@@[5;1H^@^@^@^@^@^@^A^@^@^@^D^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@[m0[34m^G^^[6;1H@^@^@^@^@^@[m0[34m^G^@^@^@^@^@^@^@^P^@^@^@^@^@^@^A^@^@^@^E^@^@^@^@^P^@^@^@^@^@^@^@^P^@@[7;1H^@^@^@^@^@^@^P^@^@^@^@^@^@^]^D^@^@^@^@^@^@^]^D^@^@^@^@^@^@^@^P^@^@^@^@^@^@^A^@^@@[8;1H^@^D^@^@^@^@[m [34m^@^@^@^@^@^@^@[m [34m^@^@^@^@^@^@^@[m [34m^@^@^@^@^@^@^@^B^@^@^@^@^@^@^@^B^@^@^^[9;1H@^@^@^@^@^P^@^@^@^@^@^@^A^@^@^@^F^@^@^@[mÃ¨[9;41H-[34m^@^@^@^@^@^@[mÃ¨[9;55H=[34m^@^@^@^@^@^@[mÃ¨[9;69H=[34m^@^@^@^@^@^^[10;1H@<80>^B^@^@^@^@^@^@[mÂ¨[10;21H[34m^B^@^@^@^@^@^@^@^P^@^@^@^@^@^@^B^@^@^@^F^@^@^@[mÃ¸[10;68H-[34m^@^@^@^@^@^@@[m[11;1HÃ¸[11;2H=[34m^@^@^@^@^@^@[mÃ¸[11;16H=[34m^@^@^@^@^@^@[mÃ [11;30H[34m^A^@^@^@^@^@^@[mÃ [11;45H[34m^A^@^@^@^@^@^@^H^@^@^@^@^@^@^@^D^@^@@[12;1H^@^D^@^@^@[mÃ„[34m^B^@^@^@^@^@^@[mÃ„[34m^B^@^@^@^@^@^@[mÃ„[34m^B^@^@^@^@^@^@[mD[34m^@^@^@^@^@^@^@[mD[34m^@^@^@^@^^[13;1H@^@^@^D^@^@^@^@^@^@^@[mPÃ¥td[34m^D^@^@^@<88>[m [34m^@^@^@^@^@^@<88>[m [34m^@^@^@^@^@^@<88>[m [34m^@^@^@^@@[14;1H^@^@[m<[34m^@^@^@^@^@^@^@[m<[34m^@^@^@^@^@^@^@^D^@^@^@^@^@^@^@[mQÃ¥td[34m^F^@^@^@^@^@^@^@^@^@^@^@^@@[15;1H^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^P^@^@^@^@^@^@^@[mRÃ¥ [16;1Htd[34m^D^@^@^@[mÃ¨[16;12H-[34m^@^@^@^@^@^@[mÃ¨[16;26H=[34m^@^@^@^@^@^@[mÃ¨[16;40H=[34m^@^@^@^@^@^@^X^B^@^@^@^@^@^@^X^B^@^@^@^@@[17;1H^@^@^A^@^@^@^@^@^@^@[m/lib64/ld-linux-x86-64.so.2[34m^@^D^@^@^@^P^@^@^@^A^@^@^@[mGNU[34m^@^@@[18;1H^@^@^@^C^@^@^@^B^@^@^@^@^@^@^@^D^@^@^@^T^@^@^@^C^@^@^@[mGNU[34m^@[mPc[34m<8f>[mÃŸ[18;67H~xVÃµndt$Ã´ÃŒ[34m^Y[mÃ‰[34m<<[19;1H85>^E[mÃ”[34m^V^B^@^@^@^M^@^@^@^A^@^@^@^F^@^@^@^@^A<81>^@^@^@^@^B^M^@^@^@^N^@^@^@[mÃ‘eÃŽm9Ã²[19;80HÃ² [20;1H[34m<8b>^\^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@[mh[34m^@^@^@^R^@^@^@^@^@^@^@^@^^[21;1H@^@^@^@^@^@^@^@^@^@^@^W^@^@^@^R^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@[my[34m^@^@^@[m [34m^@^^[22;1H@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^K^@^@^@^R^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^^[23;1H@^@[m7[34m^@^@^@^R^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@[mV[34m^@^@^@^R^@^@^@^@^@^@^@^@^@^@^[m[24;63H1,1[11CTop[1;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[24;53H:[1;1H[24;1H[K[24;1H:[?2004h[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t[24;1H[K[24;1H[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ vim bug-program.c 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[24;1H"bug-program.c" 76L, 2203C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc(strlen([32mstruct[m KeyValue *) + [31m1[m);

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H21,37[10C5%[18;37H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25ln[106m([17C)[m[24;67H8[18;38H[?25h[?25l[24;53Hi[18;38H[24;53H [18;38H[24;1H[1m-- INSERT --[m[24;13H[K[24;63H21,38[10C5%[18;38H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;62H[K[18;37H[106m([m[32ms[m[16C[106m)[m [24;67H7[18;37H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;61H[K[18;36H[106m([m[32ms[m[16C[106m)[m [24;67H6[18;36H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;60H[K[18;35H[106m([m[32ms[m[16C[106m)[m [24;67H5[18;35H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;59H[K[18;34H[106m([m[32ms[m[16C[106m)[m [24;67H4[18;34H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;58H[K[18;33H[106m([m[32ms[m[16C[106m)[m [24;67H3[18;33H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[106m [m+ [31m1[m);[18;57H[K[18;32H[106m([m[32ms[m[16C[106m)[m [24;67H2[18;32H[?25h[?25l[106ms[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;32Hs[106m([m[16C*[106m)[m[24;67H3[18;33H[?25h[?25l[106mi[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;33Hi[106m([m[16C*[106m)[m[24;67H4[18;34H[?25h[?25l[106mz[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;34Hz[106m([m[16C*[106m)[m[24;67H5[18;35H[?25h[?25l[106me[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;35He[106m([m[16C*[106m)[m[24;67H6[18;36H[?25h[?25l[106mo[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;36Ho[106m([m[16C*[106m)[m[24;67H7[18;37H[?25h[?25l[38;5;130msizeo[m[38;5;130m[106mf[m([32mstruct[m KeyValue [106m*[m) + [31m1[m);[18;37H[38;5;130mf[m[106m([m[16C*[106m)[m[24;67H8[18;38H[?25h[?25l[18;31H[106m([m[6C([17C)[4C[106m)[m[24;66H61[18;61H[?25h[?25l)[106m;[m[18;62H[K[18;60H[106m)[m;[24;67H0[18;60H[?25h[?25l)[106m;[m[18;61H[K[18;59H[106m)[m;[24;66H59[18;59H[?25h[?25l)[106m;[m[18;60H[K[18;58H[106m)[m;[24;67H8[18;58H[?25h[?25l)[106m;[m[18;59H[K[18;57H[106m)[m;[24;67H7[18;57H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H21,57[9C11%[15;57H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m[24;63H[K[24;63H21,57[9C16%[12;57H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hkv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;[24;63H[K[24;63H21,57[9C22%[9;57H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Free all the key-value's in keyValues. */[m[24;63H[K[24;63H21,57[9C28%[6;57H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[24;63H[K[24;63H21,57[9C22%[9;57H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};[24;63H[K[24;63H21,57[9C16%[12;57H[?25h[?25l[106m:[m);:[106m)[m[24;67H8[12;58H[?25h[?25l[106mw[m);w[106m)[m[24;67H9[12;59H[?25h[?25l[13;23r[13;1H[L[1;24r[12;59H[K[13;19H);[24;63H[K[24;63H22,5-19[7C16%[13;19H[106m)[?25h[?25l[m)[106m;[m[13;20H[K[13;18H[106m)[m;[24;66H4-18[13;18H[?25h[?25l)[106m;[m[13;19H[K[13;17H[106m)[m;[24;66H3-17[13;17H[?25h[?25l[13;9H)[106m;[m[13;17H[K[13;9H[106m)[m;[24;66H2-9 [13;9H[?25h[?25l)[106m;[m[13;9H[K[13;1H[106m)[m;[24;66H1  [13;1H[?25h[?25l[12;23r[23;1H
[1;24r[12;1H  [32mstruct[m KeyValue *kv = malloc[106m([m[38;5;130msizeof[m([32mstruct[m KeyValue *):w);[23;3H[34m//initialize fields of *kv.[m[24;63H[K[24;63H21,59[9C16%[12;59H[106m)[?25h[m[24;1H[K[12;58H[?25l[24;53H^[[12;58H[24;53H  [12;59H[12;31H([27C)[24;63H21,58[9C16%[12;58H[?25h[?25l[24;53H:[12;58H[24;53H[K[24;1H:[?2004h[?25hq[?25l[?25h[?25l[97m[41mE37: No write since last change (add ! to override)[?2004h[12;58H[m[24;63H21,58[9C16%[12;58H[?25h[?25l[24;53H:[12;58H[24;1H[K[24;1H:[?2004h[?25hq[?25l[?25h![?25l[?25h[?25l[?1006l[?1002l[?2004l[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t[24;1H[K[24;1H[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
[01m[Kbug-program.c:[m[K In function â€˜[01m[Kadd_key_value[m[Kâ€™:
[01m[Kbug-program.c:21:39:[m[K [01;31m[Kerror: [m[Kexpected expression before â€˜[01m[Kstruct[m[Kâ€™
   struct KeyValue *kv = malloc(strlen([01;31m[Kstruct[m[K KeyValue *) + 1);
                                       [01;31m[K^~~~~~[m[K
make: *** [<builtin>: bug-program] Error 1
qxiong1@remote05:~/i220b/work/lab6/bug-program$ vimmakevim bug-program.c [K.c 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[24;1H"bug-program.c" 76L, 2203C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc(strlen([32mstruct[m KeyValue *) + [31m1[m);

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H21,58[10C5%[18;58H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[24;53Hi[18;58H[24;53H [18;58H[24;1H[1m-- INSERT --[m[24;13H[K[24;63H21,58[10C5%[18;58H[?25h[?25l[18;31H[106m([29C)[m[24;66H61[18;61H[?25h[?25l)[106m;[m[18;62H[K[18;60H[106m)[m;[24;67H0[18;60H[?25h[?25l)[106m;[m[18;61H[K[18;59H[106m)[m;[24;66H59[18;59H[?25h[?25l)[106m;[m[18;60H[K[18;58H[106m)[m;[24;67H8[18;58H[?25h[?25l)[106m;[m[18;59H[K[18;57H[106m)[m;[24;67H7[18;57H[?25h[?25l[18;31H(strlen[106m([17C)[m)[24;66H38[18;38H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[1C;[18;58H[K[18;37H[106m([m[32ms[m[16C[106m)[m)[24;67H7[18;37H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[1C;[18;57H[K[18;36H[106m([m[32ms[m[16C[106m)[m)[24;67H6[18;36H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[1C;[18;56H[K[18;35H[106m([m[32ms[m[16C[106m)[m)[24;67H5[18;35H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[1C;[18;55H[K[18;34H[106m([m[32ms[m[16C[106m)[m)[24;67H4[18;34H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[1C;[18;54H[K[18;33H[106m([m[32ms[m[16C[106m)[m)[24;67H3[18;33H[?25h[?25l([32m[106ms[m[32mtruct[m KeyValue *)[1C;[18;53H[K[18;32H[106m([m[32ms[m[16C[106m)[m)[24;67H2[18;32H[?25h[?25l[106ms[m([32mstruct[m KeyValue [106m*[m));[18;32Hs[106m([m[16C*[106m)[m[24;67H3[18;33H[?25h[?25l[106mi[m([32mstruct[m KeyValue [106m*[m));[18;33Hi[106m([m[16C*[106m)[m[24;67H4[18;34H[?25h[?25l[106mz[m([32mstruct[m KeyValue [106m*[m));[18;34Hz[106m([m[16C*[106m)[m[24;67H5[18;35H[?25h[?25l[106me[m([32mstruct[m KeyValue [106m*[m));[18;35He[106m([m[16C*[106m)[m[24;67H6[18;36H[?25h[?25l[106mo[m([32mstruct[m KeyValue [106m*[m));[18;36Ho[106m([m[16C*[106m)[m[24;67H7[18;37H[?25h[?25l[38;5;130msizeo[m[38;5;130m[106mf[m([32mstruct[m KeyValue [106m*[m));[18;37H[38;5;130mf[m[106m([m[16C*[106m)[m[24;67H8[18;38H[?25h[24;1H[K[18;37H[?25l[24;53H^[[18;37H[24;53H  [18;38H([17C)[24;63H21,37[10C5%[18;37H[?25h[?25l[24;53H:[18;37H[24;53H[K[24;1H:[?2004h[?25hw[?25l[?25h\[?25l[?25h[?25l[24;3H[K[24;3H[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 76L, 2199C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
qxiong1@remote05:~/i220b/work/lab6/bug-program$ makevim bug-program.c make[Kvim bug-program.c 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;24r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[24;1H"bug-program.c" 76L, 2199C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H21,37[10C5%[18;37H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;1H[K[24;63H21,37[9C11%[15;37H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m[24;63H[K[24;63H21,37[9C16%[12;37H[?25h[?25l[15;19H[106m([9C)[m[24;64H4,29[15;29H[?25h[?25l[24;53Hi[15;29H[24;53H [15;29H[24;1H[1m-- INSERT --[m[24;63H[K[24;63H24,29[9C16%[15;29H[?25h[?25l[106m [m); [106m)[m[24;66H30[15;30H[?25h[?25l[106m+[m);+[106m)[m[24;67H1[15;31H[?25h[?25l[106m [m); [106m)[m[24;67H2[15;32H[?25h[?25l[31m[106m1[m);[31m1[m[106m)[m[24;67H3[15;33H[?25h[?25l[106m:[m);:[106m)[m[24;67H4[15;34H[?25h[?25l[106mw[m);w[106m)[m[24;67H5[15;35H[?25h[?25l)[106m;[m[15;36H[K[15;34H[106m)[m;[24;67H4[15;34H[?25h[?25l)[106m;[m[15;35H[K[15;33H[106m)[m;[24;67H3[15;33H[?25h[24;1H[K[15;32H[?25l[24;53H^[[15;32H[24;53H  [15;33H[15;19H([13C)[24;63H24,32[9C16%[15;32H[?25h[?25l[24;53H:[15;32H[24;53H[K[24;1H:[?2004h[?25hw[?25l[?25h[?25l"bug-program.c" 76L, 2203C written[15;32H[24;63H24,32[9C16%[24;63H[K[24;63H24,32[9C16%[15;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3Hkv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;[24;1H[K[24;63H24,32[9C22%[12;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Free all the key-value's in keyValues. */[m[24;63H[K[24;63H24,32[9C28%[9;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{[24;63H[K[24;63H24,32[9C33%[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m[24;63H[K[24;63H27,32[9C39%[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H}
}[24;63H[K[24;63H30,32[9C45%[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[24;63H[K[24;63H33,32[9C50%[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {[24;63H[K[24;63H36,1[10C56%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,[24;63H[K[24;63H39,11[9C62%[6;11H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;[24;63H[K[24;63H42,30[9C67%[6;30H[?25h[?25l[1;23r[1;1H[3M[1;24r[4;64H[106m{

[m  [106m}[m[21;3H[38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }[24;63H[K[24;63H45,3[10C73%[6;3H[?25h[?25l[1;23r[1;1H[3M[1;24r[1;64H{

  }[21;3H[38;5;130mreturn[m p;
}[24;63H[K[24;63H48,32[9C79%[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m[24;63H[K[24;63H51,24[9C84%[6;24H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[24;63H[K[24;63H54,32[9C90%[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hprintf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }
  free_key_values(keyValues);[24;63H[K[24;63H57,32[9C96%[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mreturn[m [31m0[m;
}
[94m~                                                                               [m[24;63H[K[24;63H60,32[9CBot[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H63,11[9CBot[6;11H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H66,32[9CBot[6;32H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H};
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {[24;63H[K[24;63H66,32[9CBot[9;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H66,32[9CBot[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[6;12H[106m{[13;1H}[m[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H69,12[9CBot[6;12H[?25h[?25l[1;23r[1;1H[3M[1;24r[3;12H{[10;1H}[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H72,32[9CBot[6;32H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H75,11[9CBot[6;11H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H76,1[10CBot[4;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H76,1[10CBot[1;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  free_key_values(keyValues);
  [38;5;130mreturn[m [31m0[m;[24;63H[K[24;63H76,1[10CBot[4;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);[24;63H[K[24;63H76,1[10CBot[7;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  paired with their index in the verse.
 */[m
[32mint[m main() {[24;63H[K[24;63H76,1[10CBot[10;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky[m[24;63H[K[24;63H76,1[10CBot[13;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5Hp = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;[24;63H[K[24;63H76,1[10CBot[16;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H};
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {[24;63H[K[24;63H76,1[10CBot[19;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5H[31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[24;63H[K[24;63H76,1[10CBot[22;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1Hmake_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,[24;63H[K[24;63H69,12[9C96%[18;12H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *[24;63H[K[24;63H66,32[9C90%[18;32H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H}

[34m/** Make key-values for all the words in the first verse of Carroll's[m[24;63H[K[24;63H63,11[9C84%[18;11H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[24;63H[K[24;63H63,11[9C90%[15;11H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hprintf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }
  free_key_values(keyValues);[24;63H[K[24;63H63,11[9C96%[12;11H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mreturn[m [31m0[m;
}
[94m~                                                                               [m[24;63H[K[24;63H63,11[9CBot[9;11H[?25h[?25l[24;63H75[21;11H[?25h[?25l[24;64H4,29[20;29H[?25h[?25l[24;53H^M[20;29H[24;53H  [21;3H[24;64H5,3 [21;3H[?25h[?25l[24;64H4,29[20;29H[?25h[?25l[24;53Hi[20;29H[24;53H [20;29H[24;1H[1m-- INSERT --[m[24;63H[K[24;63H74,29[9CBot[20;29H[?25h[?25l[24;66H30[20;30H[?25h[?25l[21;23r[21;1H[L[1;24r[24;63H[K[24;63H75,3[10CBot[21;3H[?25h[?25l[1;23r[23;1H
[1;24r[21;23r[21;1H[L[1;24r[24;63H[K[24;63H76,3[10CBot[21;3H[?25h[?25l[1;23r[23;1H
[1;24r[21;23r[21;1H[L[1;24r[24;63H[K[24;63H77,3[10CBot[21;3H[?25h[?25l[24;64H6,1[20;1H[?25h[?25l[24;64H7[21;1H[?25h[?25l[20;23r[23;1H
[1;24r[23;1H[94m~                                                                               [m[24;63H[K[24;63H76,1[10CBot[20;1H[?25h[?25l[19;23r[23;1H
[1;24r[23;1H[94m~                                                                               [m[24;63H[K[24;63H75,1[10CBot[19;1H[?25h[?25l[24;66H2-9[19;9H[?25h[?25l[24;66H1  [19;1H[?25h[?25l[18;23r[23;1H
[1;24r[18;3Hfree_key_values(keyValues);[23;1H[94m~                                                                               [m[24;63H[K[24;63H74,30[9CBot[18;30H[?25h[?25l[1;23r[23;1H
[1;24r[18;23r[18;1H[L[1;24r[24;63H[K[24;63H75,3[10CBot[18;3H[?25h[?25lf[24;66H4[18;4H[?25h[?25lr[24;66H5[18;5H[?25h[?25le[24;66H6[18;6H[?25h[?25le[24;66H7[18;7H[?25h[?25l([24;66H8[18;8H[?25h[?25l)[106m()[m[24;66H9[18;9H[?25h[?25l[24;66H8[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5H[31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[24;63H[K[24;63H75,8[10CBot[21;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1Hmake_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,[24;63H[K[24;63H69,8[10C94%[18;8H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *[24;63H[K[24;63H63,8[10C83%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }[24;63H[K[24;63H60,8[10C77%[18;7H[106m([48C)[18;8H[?25h[?25l[1;23r[m[1;1H[3L[1;24r[1;1Hfree_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m[24;63H[K[24;63H57,8[10C72%[21;7H([48C)[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m[24;63H[K[24;63H54,8[10C66%[18;8H[?25h[?25l[1;23r[1;1H[6L[1;24r[2;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}[24;63H[K[24;63H48,8[10C55%[18;8H[?25h[?25l[1;23r[1;1H[6L[1;24r[2;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H42,8[10C44%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);[24;63H[K[24;63H39,8[10C38%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));[24;63H[K[24;63H36,2[10C33%[1;1H[106m{[18;1H}[?25h[?25l[1;23r[m[1;1H[3L[1;24r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)[24;63H[K[24;63H33,8[10C27%[4;1H{[21;1H}[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[24;63H[K[24;63H30,8[10C22%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};[24;63H[K[24;63H27,8[10C16%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m[24;63H[K[24;63H24,8[10C11%[18;8H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H[K[24;63H18,8[11C5%[15;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H18,8[10C11%[12;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[24;63H[K[24;63H18,8[11C5%[15;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H[K[24;63H18,8[11C5%[15;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hfprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }[24;63H[K[24;63H18,8[10C11%[12;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;3Hstrcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;[24;63H[K[24;63H18,8[10C22%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Free all the key-value's in keyValues. */[m[24;63H[K[24;63H21,8[10C27%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{[24;63H[K[24;63H24,8[10C33%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m[24;63H[K[24;63H27,8[10C38%[6;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;3H}
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[24;63H[K[24;63H33,8[10C50%[6;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;1H[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,[24;63H[K[24;63H39,8[10C61%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;[24;63H[K[24;63H42,8[10C66%[6;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;3H[38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;
}[24;63H[K[24;63H48,8[10C77%[6;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;1H[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m
[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[24;63H[K[24;63H54,8[10C88%[6;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;5Hprintf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }
  free_key_values(keyValues);
  free()
  [38;5;130mreturn[m [31m0[m;
}[24;63H[K[24;63H60,8[10CBot[6;7H[106m([48C)[6;8H[?25h[?25l[1;23r[m[1;1H[6M[1;24r[18;1H[94m~                                                                               [19;1H~                                                                               [20;1H~                                                                               [21;1H~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H66,8[10CBot[6;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;1H[94m~                                                                               [19;1H~                                                                               [20;1H~                                                                               [21;1H~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H72,8[10CBot[6;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;1H[94m~                                                                               [19;1H~                                                                               [20;1H~                                                                               [21;1H~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H77,2[10CBot[5;2H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H77,2[10CBot[2;2H[?25h[?25l[1;23r[23;1H
[1;24r[23;1H[94m~                                                                               [m[24;63H[K[24;63H77,2[10CBot[1;2H[?25h[?25l[24;63H[K[24;63H77,2[10CBot[1;2H[?25h[?25l[24;63H[K[24;63H77,2[10CBot[1;2H[?25h[?25l[24;63H[K[24;63H77,2[10CBot[1;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3Hfree_key_values(keyValues);
  free()
  [38;5;130mreturn[m [31m0[m;[24;63H[K[24;63H77,2[10CBot[4;2H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H[34m */[m
[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }[24;63H[K[24;63H77,2[10CBot[10;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[24;63H[K[24;63H77,2[10CBot[13;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  [38;5;130mreturn[m p;
}[24;63H[K[24;63H77,2[10CBot[16;2H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;5H[31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);[24;63H[K[24;63H77,2[10CBot[22;2H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,[24;63H[K[24;63H67,8[10C90%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.[m[24;63H[K[24;63H64,2[10C85%[6;23H[106m{[18;1H}[?25h[?25l[1;23r[m[1;1H[3L[1;24r[1;5Hfree(p); [34m//free KeyValue struct[m
  }
}[24;63H[K[24;63H61,8[10C79%[9;23H{[21;1H}[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[24;63H[K[24;63H58,5[10C74%[18;5H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)[24;63H[K[24;63H55,8[10C68%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[38;5;130mreturn[m kv;
}[24;63H[K[24;63H52,8[10C62%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[24;63H[K[24;63H49,8[10C57%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H46,2[10C51%[13;1H[106m{[18;1H}[?25h[?25l[1;23r[m[1;1H[3L[1;24r[1;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);[24;63H[K[24;63H43,8[10C46%[16;1H{[18;7H[106m([54C)[m


}[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);[24;63H[K[24;63H40,8[10C40%[21;7H([54C)[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));[24;63H[K[24;63H37,1[10C35%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{[24;63H[K[24;63H34,1[10C29%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m[24;63H[K[24;63H31,1[10C24%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H};

[34m/** Given some chain keyValues of key-value struct's, add the[m[24;63H[K[24;63H28,8[10C18%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m[24;63H[K[24;63H25,1[10C12%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {[24;63H[K[24;63H22,1[11C7%[18;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hexit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H22,1[10C12%[15;1H[?25h[?25l[1;23r[1;1H[6M[1;24r[19;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}[24;63H[K[24;63H22,1[10C24%[9;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[22;1H[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m[24;63H[K[24;63H22,1[10C29%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1Hfree_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m[24;63H[K[24;63H25,1[10C35%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }[24;63H[K[24;63H28,8[10C40%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Make key-values for all the words in the first verse of Carroll's[m[24;63H[K[24;63H31,1[10C46%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[34m *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *[24;63H[K[24;63H34,1[10C51%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1Hmake_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,[24;63H[K[24;63H37,1[10C57%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[24;63H[K[24;63H40,8[10C62%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H};
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {[24;63H[K[24;63H43,8[10C68%[6;7H[106m([54C)[6;8H[?25h[?25l[1;23r[m[1;1H[3M[1;24r[21;5Hp = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;[24;63H[K[24;63H46,2[10C74%[1;1H[106m{[m[3;7H([54C)


[106m}[?25h[?25l[1;23r[m[1;1H[6M[1;24r[18;1H}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m
[32mint[m main() {[24;63H[K[24;63H52,8[10C85%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);[24;63H[K[24;63H55,8[10C90%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H}
  free_key_values(keyValues);
  free()[24;63H[K[24;63H58,5[10C96%[6;5H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mreturn[m [31m0[m;
}
[94m~                                                                               [m[24;63H[K[24;63H61,8[10CBot[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H64,2[10CBot[6;2H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H67,8[10CBot[6;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);[24;63H[K[24;63H67,8[10CBot[9;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5H[31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };[24;63H[K[24;63H67,8[10CBot[12;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,[24;63H[K[24;63H67,8[10C96%[15;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {[24;63H[K[24;63H67,8[10C90%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.[m[24;63H[K[24;63H64,2[10C85%[6;23H[106m{[18;1H}[?25h[?25l[1;23r[m[1;1H[3L[1;24r[1;5Hfree(p); [34m//free KeyValue struct[m
  }
}[24;63H[K[24;63H61,8[10C79%[9;23H{[21;1H}[18;8H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[24;63H[K[24;63H55,8[10C68%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[38;5;130mreturn[m kv;
}[24;63H[K[24;63H52,8[10C62%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[24;63H[K[24;63H49,8[10C57%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H46,2[10C51%[13;1H[106m{[18;1H}[?25h[?25l[1;23r[m[1;1H[6L[1;24r[1;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);[24;63H[K[24;63H40,8[10C40%[19;1H{[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));[24;63H[K[24;63H37,1[10C35%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{[24;63H[K[24;63H34,1[10C29%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m[24;63H[K[24;63H31,1[10C24%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H};

[34m/** Given some chain keyValues of key-value struct's, add the[m[24;63H[K[24;63H28,8[10C18%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m[24;63H[K[24;63H25,1[10C12%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {[24;63H[K[24;63H22,1[11C7%[18;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5Hexit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H22,1[10C12%[15;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[22;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[24;63H[K[24;63H22,1[10C18%[12;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[22;3H[38;5;130mreturn[m kv;
}[24;63H[K[24;63H22,1[10C24%[9;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[22;1H[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m[24;63H[K[24;63H22,1[10C29%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1Hfree_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m[24;63H[K[24;63H25,1[10C35%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }[24;63H[K[24;63H28,8[10C40%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H}

[34m/** Make key-values for all the words in the first verse of Carroll's[m[24;63H[K[24;63H31,1[10C46%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[34m *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *[24;63H[K[24;63H34,1[10C51%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1Hmake_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,[24;63H[K[24;63H37,1[10C57%[6;1H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;5H[31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[24;63H[K[24;63H40,8[10C62%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H};
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {[24;63H[K[24;63H43,8[10C68%[6;7H[106m([54C)[6;8H[?25h[?25l[1;23r[m[1;1H[3M[1;24r[21;5Hp = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;[24;63H[K[24;63H46,2[10C74%[1;1H[106m{[m[3;7H([54C)


[106m}[?25h[?25l[1;23r[m[1;1H[3M[1;24r[21;1H}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky[m[24;63H[K[24;63H49,8[10C79%[3;1H}[6;8H[?25h[?25l[1;23r[1;1H[6M[1;24r[18;1H[34m *  paired with their index in the verse.
 */[m
[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);[24;63H[K[24;63H55,8[10C90%[6;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.[m[24;63H[K[24;63H55,8[10C85%[9;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);[24;63H[K[24;63H55,8[10C90%[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H}
  free_key_values(keyValues);
  free()[24;63H[K[24;63H58,5[10C96%[6;5H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[38;5;130mreturn[m [31m0[m;
}
[94m~                                                                               [m[24;63H[K[24;63H61,8[10CBot[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H64,2[10CBot[6;2H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H67,8[10CBot[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H70,8[10CBot[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H73,4[10CBot[4;64H[106m{

[m  [106m}[?25h[?25l[1;23r[m[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H76,8[10CBot[1;64H{

  }[6;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H77,2[10CBot[4;2H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;1H[94m~                                                                               [22;1H~                                                                               [23;1H~                                                                               [m[24;63H[K[24;63H77,2[10CBot[1;2H[?25h[?25l[24;63H[K[24;63H77,2[10CBot[1;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3Hfree_key_values(keyValues);
  free()
  [38;5;130mreturn[m [31m0[m;[24;63H[K[24;63H77,2[10CBot[4;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }[24;63H[K[24;63H77,2[10CBot[7;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m */[m
[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();[24;63H[K[24;63H77,2[10CBot[10;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[24;63H[K[24;63H77,2[10CBot[13;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  [38;5;130mreturn[m p;
}[24;63H[K[24;63H77,2[10CBot[16;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);[24;63H[K[24;63H77,2[10CBot[19;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;5H[31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };[24;63H[K[24;63H77,2[10CBot[22;2H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,[24;63H[K[24;63H70,8[10C96%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {[24;63H[K[24;63H67,8[10C90%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[2;1H[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.[m[24;63H[K[24;63H64,2[10C85%[6;23H[106m{[18;1H}[?25h[?25l[1;23r[m[1;1H[3L[1;24r[1;5Hfree(p); [34m//free KeyValue struct[m
  }
}[24;63H[K[24;63H61,8[10C79%[9;23H{[21;1H}[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[24;63H[K[24;63H58,5[10C74%[18;5H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)[24;63H[K[24;63H55,8[10C68%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[38;5;130mreturn[m kv;
}[24;63H[K[24;63H52,8[10C62%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[24;63H[K[24;63H49,8[10C57%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H46,2[10C51%[13;1H[106m{[18;1H}[?25h[?25l[1;23r[m[1;1H[3L[1;24r[1;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);[24;63H[K[24;63H43,8[10C46%[16;1H{[18;7H[106m([54C)[m


}[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);[24;63H[K[24;63H40,8[10C40%[21;7H([54C)[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));[24;63H[K[24;63H37,1[10C35%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{[24;63H[K[24;63H34,1[10C29%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H[34m *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m[24;63H[K[24;63H31,1[10C24%[18;1H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;1H};

[34m/** Given some chain keyValues of key-value struct's, add the[m[24;63H[K[24;63H28,8[10C18%[18;8H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H[32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m[24;63H[K[24;63H25,1[10C12%[18;1H[?25h[?25l[1;23r[1;1H[6L[1;24r[1;1H[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {[24;63H[K[24;63H19,2[11C1%[18;2H[?25h[?25l[1;23r[1;1H[L[1;24r[1;1H[35m#include [m[31m<errno.h>[m[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[24;63H[K[24;63H18,8[10CTop[18;8H[?25h[?25l[1;23r[1;1H[3M[1;24r[21;3H[32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m[24;63H[K[24;63H18,8[11C5%[15;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
[1m-- INSERT --[m[51C18,8[11C5%[15;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
[1m-- INSERT --[m[53C18,8[11C5%[15;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
[1m-- INSERT --[m[56C18,8[11C3%[16;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
[1m-- INSERT --[m[68C18,8[11C2%[17;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
[1m-- INSERT --[m[75C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m
[1m-- INSERT --[m[82C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
[1m-- INSERT --[m[91C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

[1m-- INSERT --[m[100C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
[1m-- INSERT --[m[129C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
[1m-- INSERT --[m[146C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.[m
[1m-- INSERT --[m[161C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
[1m-- INSERT --[m[172C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[178C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[172C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[162C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[152C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[142C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[132C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[129C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[127C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[126C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[122C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[117C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[115C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[113C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[112C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[109C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[107C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[101C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[99C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[92C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[90C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[84C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[83C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[80C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[78C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[77C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[75C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[73C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[72C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[70C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[69C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[68C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[67C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[68C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[71C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[77C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[80C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[89C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[90C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[94C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[96C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[98C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[99C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[100C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[102C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[103C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[104C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[105C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[106C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[109C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[110C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[112C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[113C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[112C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[105C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[95C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[86C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[82C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[79C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[78C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[78C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[95C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[136C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[178C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[177C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[172C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[170C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[162C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[152C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[138C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[133C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[125C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[118C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[115C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[109C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[108C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[102C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[100C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[96C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[94C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[90C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[86C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[84C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[82C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[81C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[80C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[79C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[78C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[77C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[75C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[74C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[72C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[71C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[70C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[69C18,8[10CTop[18;8H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);

  [38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
[1m-- INSERT --[m[68C18,8[10CTop[18;8H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;5H[31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,[54;81H[K[54;81H18,8[10C12%[15;8H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;5H[31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;[54;81H[K[54;81H18,8[10C25%[12;8H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;3H[38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }[54;81H[K[54;81H18,8[10C37%[9;8H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m[54;81H[K[54;81H18,8[10C25%[12;8H[?25h[?25l[1;53r[1;1H[6L[1;54r[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[54;81H[K[54;81H18,8[10CTop[18;8H[?25h[?25l[54;81H[K[54;81H18,8[10CTop[18;8H[?25h[?25l[54;81H[K[54;81H18,8[10CTop[18;8H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;5H[31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,[54;81H[K[54;81H18,8[10C12%[15;8H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;5H[31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;[54;81H[K[54;81H18,8[10C25%[12;8H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;3H[38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }[54;81H[K[54;81H18,8[10C37%[9;8H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;3H[38;5;130mreturn[m p;
}[54;81H[K[54;81H18,8[10C50%[6;8H[?25h[?25l[1;53r[1;1H[6M[1;54r[48;1H[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m
[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {[54;81H[K[54;81H24,8[10C75%[6;8H[?25h[?25l[1;53r[1;1H[12M[1;54r[42;5Hprintf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }
  free_key_values(keyValues);
  free()
  [38;5;130mreturn[m [31m0[m;
}
[94m~                                                                                                 [49;1H~                                                                                                 [50;1H~                                                                                                 [51;1H~                                                                                                 [52;1H~                                                                                                 [53;1H~                                                                                                 [m[54;81H[K[54;81H36,2[10CBot[6;2H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H[94m~                                                                                                 [52;1H~                                                                                                 [53;1H~                                                                                                 [m[54;81H[K[54;81H39,8[10CBot[6;8H[?25h[?25l[1;53r[1;1H[6M[1;54r[48;1H[94m~                                                                                                 [49;1H~                                                                                                 [50;1H~                                                                                                 [51;1H~                                                                                                 [52;1H~                                                                                                 [53;1H~                                                                                                 [m[54;81H[K[54;81H45,4[10CBot[4;64H[106m{

[m  [106m}[?25h[?25l[1;53r[m[1;1H[6M[1;54r[48;1H[94m~                                                                                                 [49;1H~                                                                                                 [50;1H~                                                                                                 [51;1H~                                                                                                 [52;1H~                                                                                                 [53;1H~                                                                                                 [m[54;81H[K[54;81H51,8[10CBot[6;8H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H[94m~                                                                                                 [52;1H~                                                                                                 [53;1H~                                                                                                 [m[54;81H[K[54;81H54,8[10CBot[6;8H[?25h[?25l[1;53r[1;1H[6M[1;54r[48;1H[94m~                                                                                                 [49;1H~                                                                                                 [50;1H~                                                                                                 [51;1H~                                                                                                 [52;1H~                                                                                                 [53;1H~                                                                                                 [m[54;81H[K[54;81H60,8[10CBot[6;7H[106m([48C)[6;8H[?25h[?25l[1;53r[m[1;1H[6M[1;54r[48;1H[94m~                                                                                                 [49;1H~                                                                                                 [50;1H~                                                                                                 [51;1H~                                                                                                 [52;1H~                                                                                                 [53;1H~                                                                                                 [m[54;81H[K[54;81H66,8[10CBot[6;8H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;3H};
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {[54;81H[K[54;81H66,8[10CBot[9;8H[?25h[?25l[1;53r[1;1H[6L[1;54r[1;1Hmake_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,[54;81H[K[54;81H66,8[10CBot[15;8H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H[34m *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *[54;81H[K[54;81H66,8[10CBot[18;8H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H}

[34m/** Make key-values for all the words in the first verse of Carroll's[m[54;81H[K[54;81H66,8[10CBot[21;8H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;3H[38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }[54;81H[K[54;81H66,8[10CBot[24;8H[?25h[?25l[33;7H[106m()[m[54;81H75,9[33;9H[?25h[?25l[33;8H[K[33;7H([54;84H8[33;8H[?25h[?25l[33;7H[K[54;84H7[33;7H[?25h[?25l[33;6H[K[54;84H6[33;6H[?25h[?25l[33;5H[K[54;84H5[33;5H[?25h[?25l[33;4H[K[54;84H4[33;4H[?25h[?25l[33;3H[K[54;84H3[33;3H[?25h[54;1H[K[33;2H[?25l[54;71H^[[33;2H[54;71H  [33;3H[54;81H75,2[10CBot[33;2H[?25h[?25l[54;71H:[33;2H[54;71H[K[54;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 77L, 2206C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
qxiong1@remote05:~/i220b/work/lab6/bug-program$ ./bug-program 
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
qxiong1@remote05:~/i220b/work/lab6/bug-program$ ./q[Kbut[K[K[K[K[K./bug-program out
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
qxiong1@remote05:~/i220b/work/lab6/bug-program$ i[Kinfo
[?1h=[?1049h[22;0;0t[H[2J[54;1HWelcome to Info version 6.5.  Type H for help, h for tutorial.[53;1H[7m-----Info: (dir)Top, 406 lines --Top-------------------------------------------------------------[0m[1;1HFile: dir,      Node: Top,      This is the top of the INFO tree.[3;1HThis is the Info main menu (aka directory node).[4;1HA few useful Info commands:[6;1H  'q' quits;[7;1H  'H' lists all Info commands;[8;1H  'h' starts the Info tutorial;[9;1H  'mTexinfo RET' visits the Texinfo manual, etc.[11;1H* Menu:[13;1HArchiving[14;1H[4m* Shar utilities[24m: (sharutils).  Shell archiver, uuencode/uudecode.[K[16;1HBasics[17;1H[4m* Common options[24m: (coreutils)Common options.[K[18;1H[4m* Coreutils[24m: (coreutils).       Core GNU (file, text, shell) utilities.[K[19;1H[4m* Date input formats[24m: (coreutils)Date input formats.[K[20;1H[4m* Ed[24m: (ed).                     The GNU line editor[K[21;1H[4m* File permissions[24m: (coreutils)File permissions.[K[22;1H                                Access modes.[23;1H[4m* Finding files[24m: (find).        Operating on files matching certain criteria.[K[25;1HC++ libraries[26;1H[4m* autosprintf[24m: (autosprintf).   Support for printf format strings in C++.[K[28;1HCompression[29;1H[4m* Gzip[24m: (gzip).                 General (de)compression of files (lzw).[K[31;1HDevelopment[32;1H[4m* Com_err[24m: (com_err).           A Common Error Description Library for UNIX.[K[33;1H[4m* SSIP[24m: (ssip).                 Speech Synthesis Interface Protocol.[K[34;1H[4m* Speech Dispatcher[24m: (speech-dispatcher).[K[35;1H                                Speech Dispatcher.[36;1H[4m* bzip2 and libbzip2, version 1.0.6[24m: (manual).[K[37;1H                                A program and library for data compression[38;1H[4m* libext2fs[24m: (libext2fs).       The EXT2FS library.[K[39;1H[4m* libffi[24m: (libffi).             Portable foreign-function interface library.[K[41;1HDOS[42;1H[4m* Mtools[24m: (mtools).             Mtools: utilities to access DOS disks in Unix.[K[44;1HEditors[45;1H[4m* JED[24m: (jed).                   The JED editor[K[46;1H[4m* nano[24m: (nano).                 Small and friendly text editor.[K[48;1HEmacs[49;1H[4m* Emacs FAQ[24m: (efaq).            Frequently Asked Questions about Emacs.[K[50;1H[4m* Haskell Mode[24m: (haskell-mode). Haskell Development Environment for Emacs(en)[K[52;1HGeneral Commands[1;1H[1;1H[54;1H[K[1;1H[1;1H[1;1H[1;1H[54;1HUnknown command (C-d)[1;1H[1;1H[54;18H:)[K[1;1H[54;1H[K[?1l>[?1049l[23;0;0t
qxiong1@remote05:~/i220b/work/lab6/bug-program$ cl[K[Kclear
[H[2J[3Jqxiong1@remote05:~/i220b/work/lab6/bug-program$ 
qxiong1@remote05:~/i220b/work/lab6/bug-program$ 
qxiong1@remote05:~/i220b/work/lab6/bug-program$ MALLOC_CHECK_=1 ./bug-program 
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
free(): invalid pointer
Aborted
qxiong1@remote05:~/i220b/work/lab6/bug-program$ vim bug-program.c
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;54r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[54;1H"bug-program.c" 77L, 2206C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[2;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [38;5;130mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [38;5;130mreturn[m p;
}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m
[32mint[m main() {
  [32mstruct[m KeyValue *keyValues = make_key_values();
  [38;5;130mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    printf([31m"[m[35m%s[m[31m: [m[35m%d\n[m[31m"[m, p->key, p->value);
  }
  free_key_values(keyValues);

  [38;5;130mreturn[m [31m0[m;
}[54;80H75,2[10CBot[51;2H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[1;53r[1;1H[3M[1;54r[51;1H[94m~                                                                                                [52;1H~                                                                                                [53;1H~                                                                                                [m[54;1H[K[54;80H75,2[10CBot[48;2H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H[94m~                                                                                                [52;1H~                                                                                                [53;1H~                                                                                                [m[54;80H[K[54;80H75,2[10CBot[45;2H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H[94m~                                                                                                [52;1H~                                                                                                [53;1H~                                                                                                [m[54;80H[K[54;80H75,2[10CBot[42;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[2;3H[34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[54;80H[K[54;80H75,2[10CBot[45;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;5Hexit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s[m[54;80H[K[54;80H75,2[10CBot[48;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[2;3H[38;5;130mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));[54;80H[K[54;80H75,2[10CBot[51;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[2;3H[34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k) + [31m1[m);[54;80H[K[54;80H69,2[10C87%[48;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([38;5;130msizeof[m([32mstruct[m KeyValue *));[54;80H[K[54;80H66,2[10C75%[48;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H[34m */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)[54;80H[K[54;80H63,2[10C62%[48;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[54;80H[K[54;80H60,2[10C50%[48;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;3H[32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};[54;80H[K[54;80H57,2[10C37%[48;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m[54;80H[K[54;80H54,2[10C25%[48;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m[54;80H[K[54;80H51,2[10C12%[48;2H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m[54;80H[K[54;80H48,2[10CTop[48;2H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;53r[1;1H[3M[1;54r[51;5H[31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,[54;80H[K[54;80H48,2[10C12%[45;2H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;5H[31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;[54;80H[K[54;80H48,2[10C25%[42;2H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;3H[38;5;130mfor[m ([32mint[m i = [31m0[m; i < [38;5;130msizeof[m(keys)/[38;5;130msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }[54;80H[K[54;80H48,2[10C37%[39;2H[?25h[?25l[15;19H[106m([13C)[m[54;80H24,33[15;33H[?25h[?25l[54;70Hi[15;33H[54;70H [15;33H[54;1H[1m-- INSERT --[m[54;80H[K[54;80H24,33[9C37%[15;33H[?25h[?25l)[106m;[m[15;34H[K[15;32H[106m)[m;[54;84H2[15;32H[?25h[?25l)[106m;[m[15;33H[K[15;31H[106m)[m;[54;84H1[15;31H[?25h[?25l)[106m;[m[15;32H[K[15;30H[106m)[m;[54;84H0[15;30H[?25h[?25l)[106m;[m[15;31H[K[15;29H[106m)[m;[54;83H29[15;29H[?25h[54;1H[K[15;28H[?25l[54;70H^[[15;28H[54;70H  [15;29H[15;19H(strlen[106m([mk[106m)[m)[54;80H24,28[9C37%[15;28H[?25h[?25l[54;70H:[15;28H[54;70H[K[54;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 77L, 2202C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
qxiong1@remote05:~/i220b/work/lab6/bug-program$ makevim bug-program.cMALLOC_CHECK_=1 ./bug-program 
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
free(): invalid pointer
Aborted
qxiong1@remote05:~/i220b/work/lab6/bug-program$ clear
[H[2J[3Jqxiong1@remote05:~/i220b/work/lab6/bug-program$ 
qxiong1@remote05:~/i220b/work/lab6/bug-program$ 
qxiong1@remote05:~/i220b/work/lab6/bug-program$ valgrind -v --leak [K-cj[Kheck=yes /[K./bug-program 2>bug-program.c [K[Kvalgrind
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
qxiong1@remote05:~/i220b/work/lab6/bug-program$ ls
bug-program  bug-program.c  bug-program.valgrind  Makefile
qxiong1@remote05:~/i220b/work/lab6/bug-program$ c[Kvim bug-program.valgrind 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;54r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[54;1H"bug-program.valgrind" 273L, 15943C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H==22348== Memcheck, a memory error detector
==22348== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22348== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[4;1H==22348== Command: ./bug-program
==22348==
--22348-- Valgrind options:
--22348--    -v
--22348--    --leak-check=yes
--22348-- Contents of /proc/version:
--22348--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[11;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--22348--
--22348-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--22348-- Page sizes: currently 4096, max supported 4096
--22348-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--22348-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[17;1H-program
--22348-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [20;1H..
--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--22348--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [24;1H..
--22348--   .. build-id is valid
--22348--    object doesn't have a dynamic symbol table
--22348-- Scheduler: using generic scheduler lock implementation.
--22348-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==22348== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-22348-by-qxiong1-on-???
==22348== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-22348-by-qxiong1-on-???
==22348== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-22348-by-qxiong1-on-???[32;1H==22348==
==22348== TO CONTROL THIS PROCESS USING vgdb (which you probably
==22348== don't want to do, unless you know exactly what you're doing,
==22348== or are doing some strange experiment):
==22348==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348 ...command...
==22348==
==22348== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==22348==   /path/to/gdb ./bug-program
==22348== and then give GDB the following command
==22348==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348
==22348== --pid is optional if only one valgrind process is running
==22348==
--22348-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[45;1Hlinux_REDIR_FOR_strlen)
--22348-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[47;1Hinux_REDIR_FOR_index)
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [50;1H..
--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug[94m@@@                                                                                              [m[54;80H1,1[11CTop[1;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;53r[1;1H[3M[1;54r[50;1H--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [51;1H..
--22348--   .. build-id is valid
==22348== WARNING: new redirection conflicts with existing -- ignoring it[54;1H[K[54;80H9,1[12C1%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[52;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen[54;80H[K[54;80H11,1[11C2%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so[54;80H[K[54;80H14,1[11C3%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [51;1H..
--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H17,1[11C5%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H20,1[11C6%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H23,1[11C7%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H27,1[11C9%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H30,1[10C10%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wr[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H33,1[10C11%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[50;1H--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[51;1Happer)
--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H36,1[10C13%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H39,1[10C14%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[10C15%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H43,1[10C17%[6;1H[?25h[?25l[1;53r[1;1H[5M[1;54r[49;1H--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[51;1H)
--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)[54;80H[K[54;80H47,1[10C18%[7;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)[54;80H[K[54;80H50,1[10C20%[7;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)
==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H53,1[10C21%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[54;80H[K[54;80H56,1[10C22%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)[54;80H[K[54;80H60,1[10C24%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[54;80H[K[54;80H63,1[10C25%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[54;80H[K[54;80H66,1[10C27%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)[54;80H[K[54;80H69,1[10C28%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H72,1[10C29%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[54;80H[K[54;80H75,1[10C31%[7;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==
==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)[54;80H[K[54;80H77,1[10C32%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[54;80H[K[54;80H81,1[10C33%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)[54;80H[K[54;80H84,1[10C35%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[54;80H[K[54;80H87,1[10C36%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)[54;80H[K[54;80H89,1[10C38%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[54;80H[K[54;80H93,1[10C39%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (memp[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H96,1[10C40%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[50;1H--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[51;1Hcpy)
==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)[54;80H[K[54;80H99,1[10C42%[6;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H99,1[10C40%[9;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)[54;80H[K[54;80H99,1[10C39%[12;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[4;1H)[54;80H[K[54;80H99,1[10C38%[16;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C36%[19;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[3;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C35%[22;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C33%[25;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[3;1Happer)
--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C32%[29;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C31%[32;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C29%[35;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C28%[38;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C27%[41;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C25%[44;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H99,1[10C24%[47;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [4;1H..[54;80H[K[54;80H96,1[10C22%[48;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[2;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)[54;80H[K[54;80H92,1[10C21%[48;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [2;1H..
--22348--   .. build-id is valid
==22348== WARNING: new redirection conflicts with existing -- ignoring it[54;80H[K[54;80H88,1[10C20%[48;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [2;1H..
--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so[54;80H[K[54;80H85,1[10C18%[48;1H[?25h[?25l[1;53r[1;1H[5L[1;54r[1;1H--22348-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[2;1Hlinux_REDIR_FOR_strlen)
--22348-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[4;1Hinux_REDIR_FOR_index)
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so[54;80H[K[54;80H80,1[10C17%[48;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348
==22348== --pid is optional if only one valgrind process is running
==22348==[54;80H[K[54;80H77,1[10C15%[48;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==22348==   /path/to/gdb ./bug-program
==22348== and then give GDB the following command[54;80H[K[54;80H74,1[10C14%[47;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== or are doing some strange experiment):
==22348==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348 ...command...
==22348==[54;80H[K[54;80H72,1[10C13%[48;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==
==22348== TO CONTROL THIS PROCESS USING vgdb (which you probably
==22348== don't want to do, unless you know exactly what you're doing,[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H68,1[10C11%[47;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-22348-by-qxiong1-on-???
==22348== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-22348-by-qxiong1-on-???
==22348== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-22348-by-qxiong1-on-???[54;80H[K[54;80H66,1[10C10%[48;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348--    object doesn't have a dynamic symbol table
--22348-- Scheduler: using generic scheduler lock implementation.
--22348-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp[54;80H[K[54;80H63,1[11C9%[48;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--22348--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [3;1H..
--22348--   .. build-id is valid[54;80H[K[54;80H59,1[11C7%[48;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [3;1H..
--22348--   .. build-id is valid[54;80H[K[54;80H55,1[11C6%[48;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- Page sizes: currently 4096, max supported 4096
--22348-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--22348-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[4;1H-program[54;80H[K[54;80H52,1[11C5%[48;1H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[2;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--22348--
--22348-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi[54;80H[K[54;80H48,1[11C3%[47;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348--    -v
--22348--    --leak-check=yes
--22348-- Contents of /proc/version:[54;80H[K[54;80H46,1[11C2%[47;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Command: ./bug-program
==22348==
--22348-- Valgrind options:[54;80H[K[54;80H44,1[11C1%[48;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Memcheck, a memory error detector
==22348== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22348== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H41,1[10CTop[46;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;53r[1;1H[3M[1;54r[50;1H--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [51;1H..
--22348--   .. build-id is valid
==22348== WARNING: new redirection conflicts with existing -- ignoring it[54;80H[K[54;80H41,1[11C1%[43;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[52;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen[54;80H[K[54;80H41,1[11C2%[40;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so[54;80H[K[54;80H41,1[11C3%[37;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [51;1H..
--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[11C5%[33;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[11C6%[29;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[11C7%[25;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[11C9%[21;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[10C10%[18;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wr[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H41,1[10C11%[15;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[50;1H--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[51;1Happer)
--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[10C13%[12;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[10C14%[9;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,1[10C15%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H43,1[10C17%[6;1H[?25h[?25l[1;53r[1;1H[5M[1;54r[49;1H--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[51;1H)
--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)[54;80H[K[54;80H47,1[10C18%[7;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)[54;80H[K[54;80H50,1[10C20%[7;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)
==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H53,1[10C21%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[54;80H[K[54;80H56,1[10C22%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)[54;80H[K[54;80H60,1[10C24%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[54;80H[K[54;80H63,1[10C25%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[54;80H[K[54;80H66,1[10C27%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)[54;80H[K[54;80H69,1[10C28%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H72,1[10C29%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[54;80H[K[54;80H75,1[10C31%[7;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==
==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)[54;80H[K[54;80H77,1[10C32%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[54;80H[K[54;80H81,1[10C33%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)[54;80H[K[54;80H84,1[10C35%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[54;80H[K[54;80H87,1[10C36%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)[54;80H[K[54;80H89,1[10C38%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[54;80H[K[54;80H93,1[10C39%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (memp[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H96,1[10C40%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[50;1H--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[51;1Hcpy)
==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)[54;80H[K[54;80H99,1[10C42%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[54;80H[K[54;80H102,1[9C43%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[54;80H[K[54;80H105,1[9C44%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)
==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)[54;80H[K[54;80H108,1[9C46%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x109355: main (bug-program.c:74)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)[54;80H[K[54;80H111,1[9C47%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x109354: free_key_values (bug-program.c:44)
==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at[54;80H[K[54;80H114,1[9C48%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[54;80H[K[54;80H117,1[9C50%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[54;80H[K[54;80H120,1[9C51%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348== HEAP SUMMARY:
==22348==     in use at exit: 100 bytes in 23 blocks
==22348==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated[54;80H[K[54;80H123,1[9C52%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==
==22348== Searching for pointers to 23 not-freed blocks
==22348== Checked 67,832 bytes[54;80H[K[54;80H126,1[9C54%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==
==22348== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H129,1[9C55%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[54;80H[K[54;80H132,1[9C57%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==
==22348== LEAK SUMMARY:
==22348==    definitely lost: 100 bytes in 23 blocks[54;80H[K[54;80H135,1[9C58%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    indirectly lost: 0 bytes in 0 blocks
==22348==      possibly lost: 0 bytes in 0 blocks
==22348==    still reachable: 0 bytes in 0 blocks[54;80H[K[54;80H138,1[9C59%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==[9Csuppressed: 0 bytes in 0 blocks
==22348==
==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)[54;80H[K[54;80H141,1[9C61%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==
==22348== 23 errors in context 1 of 8:
==22348== Invalid read of size 8[54;80H[K[54;80H144,1[9C62%[7;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd[54;80H[K[54;80H146,1[9C63%[6;1H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)
==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at[54;80H[K[54;80H150,1[9C65%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[54;80H[K[54;80H153,1[9C66%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[54;80H[K[54;80H156,1[9C68%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348== 23 errors in context 2 of 8:
==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)[54;80H[K[54;80H159,1[9C69%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[54;80H[K[54;80H162,1[9C70%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[54;80H[K[54;80H165,1[9C72%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==
==22348== 23 errors in context 3 of 8:
==22348== Invalid read of size 1[54;80H[K[54;80H168,1[9C73%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)[54;80H[K[54;80H171,1[9C75%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H174,1[9C76%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[54;80H[K[54;80H177,1[9C77%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==
==22348==
==22348== 23 errors in context 4 of 8:[54;80H[K[54;80H180,1[9C79%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd[54;80H[K[54;80H183,1[9C80%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[54;80H[K[54;80H186,1[9C81%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[54;80H[K[54;80H189,1[9C83%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348== 23 errors in context 5 of 8:
==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)[54;80H[K[54;80H192,1[9C84%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[54;80H[K[54;80H195,1[9C85%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[54;80H[K[54;80H198,1[9C87%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[54;80H[K[54;80H201,1[9C88%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348== 23 errors in context 6 of 8:
==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)[54;80H[K[54;80H204,1[9C90%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[54;80H[K[54;80H207,1[9C91%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[54;80H[K[54;80H210,1[9C92%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[54;80H[K[54;80H213,1[9C94%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348== 23 errors in context 7 of 8:
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)[54;80H[K[54;80H216,1[9C95%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)[54;80H[K[54;80H219,1[9C96%[6;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[54;80H[K[54;80H222,1[9C98%[6;1H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== 23 errors in context 3 of 8:
==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[54;80H[K[54;80H222,1[9C96%[9;1H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[54;80H[K[54;80H222,1[9C98%[6;1H[?25h[?25l[54;81H39,23[23;23H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== 23 errors in context 3 of 8:
==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[54;80H[K[54;80H239,23[8C96%[26;23H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[54;80H[K[54;80H239,23[8C95%[29;23H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[54;80H[K[54;80H239,23[8C94%[32;23H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[54;80H[K[54;80H239,23[8C92%[35;23H[?25h[?25l[54;82H0,40[26;40H[?25h[?25l[54;82H6,1[32;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==
==22348==
==22348== 23 errors in context 2 of 8:[54;80H[K[54;80H236,10[8C91%[35;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[54;80H[K[54;80H236,10[8C90%[38;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H236,10[8C88%[41;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[54;80H[K[54;80H236,10[8C87%[44;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)[54;80H[K[54;80H236,10[8C85%[47;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
==22348==
==22348== 23 errors in context 1 of 8:[54;80H[K[54;80H234,42[8C84%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    still reachable: 0 bytes in 0 blocks
==22348==[9Csuppressed: 0 bytes in 0 blocks
==22348==[54;80H[K[54;80H231,42[8C83%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    definitely lost: 100 bytes in 23 blocks
==22348==    indirectly lost: 0 bytes in 0 blocks
==22348==      possibly lost: 0 bytes in 0 blocks[54;80H[K[54;80H228,32[8C81%[48;32H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== LEAK SUMMARY:[54;80H[K[54;80H225,10[8C80%[48;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[54;80H[K[54;80H222,42[8C79%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Checked 67,832 bytes
==22348==
==22348== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1[54;80H[K[54;80H219,42[8C77%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==22348==
==22348== Searching for pointers to 23 not-freed blocks[54;80H[K[54;80H216,42[8C76%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==
==22348== HEAP SUMMARY:
==22348==     in use at exit: 100 bytes in 23 blocks[54;80H[K[54;80H213,10[8C75%[48;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[54;80H[K[54;80H210,42[8C73%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[54;80H[K[54;80H207,42[8C72%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)
==22348==    by 0x109354: main (bug-program.c:74)[54;80H[K[54;80H204,38[8C70%[48;38H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd[54;80H[K[54;80H201,42[8C69%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==
--22348-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)
==22348== Invalid read of size 8[54;80H[K[54;80H198,42[8C68%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[54;80H[K[54;80H195,42[8C66%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H192,42[8C65%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[3;1Hcpy)
==22348== Invalid read of size 8[54;80H[K[54;80H188,10[8C63%[48;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[54;80H[K[54;80H185,42[8C62%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H182,42[8C61%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)[54;80H[K[54;80H179,10[8C59%[48;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
==22348== Invalid read of size 1[54;80H[K[54;80H176,42[8C58%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[54;80H[K[54;80H173,10[8C57%[48;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[54;80H[K[54;80H170,10[8C55%[48;10H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==
==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)[54;80H[K[54;80H167,23[8C54%[48;23H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[54;80H[K[54;80H164,42[8C52%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H161,42[8C51%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)[54;80H[K[54;80H158,42[8C50%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[54;80H[K[54;80H155,42[8C48%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[54;80H[K[54;80H152,42[8C47%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)[54;80H[K[54;80H149,42[8C46%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== Invalid write of size 4[54;80H[K[54;80H146,42[8C44%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[54;80H[K[54;80H143,42[8C43%[47;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)
==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd[54;80H[K[54;80H141,42[8C42%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H137,42[8C40%[47;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)[54;80H[K[54;80H135,42[8C39%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[4;1H)[54;80H[K[54;80H131,42[8C38%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H128,42[8C36%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[3;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H125,42[8C35%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H122,32[8C33%[48;32H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[3;1Happer)
--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H118,42[8C32%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H115,42[8C31%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H112,33[8C29%[48;33H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H109,42[8C28%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H106,42[8C27%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H103,42[8C25%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H100,42[8C24%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [4;1H..[54;80H[K[54;80H96,42[9C22%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[2;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)[54;80H[K[54;80H92,42[9C21%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [2;1H..
--22348--   .. build-id is valid
==22348== WARNING: new redirection conflicts with existing -- ignoring it[54;80H[K[54;80H88,42[9C20%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [2;1H..
--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so[54;80H[K[54;80H85,42[9C18%[48;42H[?25h[?25l[1;53r[1;1H[5L[1;54r[1;1H--22348-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[2;1Hlinux_REDIR_FOR_strlen)
--22348-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[4;1Hinux_REDIR_FOR_index)
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so[54;80H[K[54;80H80,42[9C17%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348
==22348== --pid is optional if only one valgrind process is running
==22348==[54;80H[K[54;80H77,42[9C15%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==22348==   /path/to/gdb ./bug-program
==22348== and then give GDB the following command[54;80H[K[54;80H74,42[9C14%[47;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== or are doing some strange experiment):
==22348==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348 ...command...
==22348==[54;80H[K[54;80H72,42[9C13%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348==
==22348== TO CONTROL THIS PROCESS USING vgdb (which you probably
==22348== don't want to do, unless you know exactly what you're doing,[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H68,42[9C11%[47;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-22348-by-qxiong1-on-???
==22348== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-22348-by-qxiong1-on-???
==22348== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-22348-by-qxiong1-on-???[54;80H[K[54;80H66,42[9C10%[48;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348--    object doesn't have a dynamic symbol table
--22348-- Scheduler: using generic scheduler lock implementation.
--22348-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp[54;80H[K[54;80H63,42[10C9%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--22348--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [3;1H..
--22348--   .. build-id is valid[54;80H[K[54;80H59,42[10C7%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [3;1H..
--22348--   .. build-id is valid[54;80H[K[54;80H55,32[10C6%[48;32H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348-- Page sizes: currently 4096, max supported 4096
--22348-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--22348-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[4;1H-program[54;80H[K[54;80H52,42[10C5%[48;42H[?25h[?25l[1;53r[1;1H[4L[1;54r[1;1H--22348--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[2;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--22348--
--22348-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi[54;80H[K[54;80H48,42[10C3%[47;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H--22348--    -v
--22348--    --leak-check=yes
--22348-- Contents of /proc/version:[54;80H[K[54;80H46,42[10C2%[47;42H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Command: ./bug-program
==22348==
--22348-- Valgrind options:[54;80H[K[54;80H44,32[10C1%[48;32H[?25h[?25l[1;53r[1;1H[3L[1;54r[1;1H==22348== Memcheck, a memory error detector
==22348== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22348== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H41,42[9CTop[46;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[54;70H^[[46;42H[54;72H[[46;42H[54;73H<[46;42H[54;70H    [46;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;53r[1;1H[3M[1;54r[50;1H--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [51;1H..
--22348--   .. build-id is valid
==22348== WARNING: new redirection conflicts with existing -- ignoring it[54;80H[K[54;80H41,42[10C1%[43;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[52;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen[54;80H[K[54;80H41,42[10C2%[40;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so[54;80H[K[54;80H41,42[10C3%[37;42H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [51;1H..
--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,42[10C5%[33;42H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,42[10C6%[29;42H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,42[10C7%[25;42H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,42[10C9%[21;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,42[9C10%[18;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wr[53;1H[94m@@@                                                                                              [m[54;80H[K[54;80H41,42[9C11%[15;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[50;1H--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[51;1Happer)
--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,42[9C13%[12;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,42[9C14%[9;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H41,42[9C15%[6;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[54;80H[K[54;80H43,42[9C17%[6;42H[?25h[?25l[1;53r[1;1H[5M[1;54r[49;1H--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[51;1H)
--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)[54;80H[K[54;80H47,32[9C18%[7;32H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)[54;80H[K[54;80H50,42[9C20%[7;42H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)
==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[54;80H[K[54;80H53,42[9C21%[6;42H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[54;80H[K[54;80H56,42[9C22%[6;42H[?25h[?25l[1;53r[1;1H[4M[1;54r[50;1H==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)[54;80H[K[54;80H60,42[9C24%[6;42H[?25h[?25l[1;53r[1;1H[3M[1;54r[51;1H==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[54;80H[K[54;80H63,42[9C25%[6;42H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[18;1Happer)
--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[25;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[32;1H)
--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)
==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H63,42[9C25%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H66,42[9C26%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348== Invalid write of size 8[52;80H[K[52;80H69,42[9C28%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)[52;80H[K[52;80H72,42[9C29%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H75,42[9C30%[7;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[52;80H[K[52;80H77,42[9C32%[6;42H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H81,42[9C33%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H84,42[9C34%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)[52;80H[K[52;80H87,42[9C36%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)[52;80H[K[52;80H89,42[9C37%[6;42H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H93,42[9C39%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H96,42[9C40%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[51;1Hcpy)[52;80H[K[52;80H99,42[9C41%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H102,33[8C43%[6;33H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H105,42[8C44%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H108,42[8C45%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)[52;80H[K[52;80H111,10[8C47%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H114,42[8C48%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H117,42[8C49%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H120,42[8C51%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== HEAP SUMMARY:[52;80H[K[52;80H123,42[8C52%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==     in use at exit: 100 bytes in 23 blocks
==22348==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==22348==[52;80H[K[52;80H126,42[8C53%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Searching for pointers to 23 not-freed blocks
==22348== Checked 67,832 bytes
==22348==[52;80H[K[52;80H129,10[8C55%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H132,32[8C56%[6;32H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H135,42[8C57%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== LEAK SUMMARY:
==22348==    definitely lost: 100 bytes in 23 blocks
==22348==    indirectly lost: 0 bytes in 0 blocks[52;80H[K[52;80H138,42[8C59%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==      possibly lost: 0 bytes in 0 blocks
==22348==    still reachable: 0 bytes in 0 blocks
==22348==[9Csuppressed: 0 bytes in 0 blocks[52;80H[K[52;80H141,42[8C60%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
==22348==[52;80H[K[52;80H144,32[8C61%[7;32H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 23 errors in context 1 of 8:
==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)[52;80H[K[52;80H146,42[8C63%[6;42H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x109355: main (bug-program.c:74)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H150,42[8C64%[6;42H[?25h[?25l[52;70H^[[6;42H[52;72H[[6;42H[52;73H<[6;42H[52;74H6[6;42H[52;75H5[6;42H[52;76H;[6;42H[52;77H4[6;42H[52;78H9[6;42H[52;79H;[6;42H[52;70H[[<65;49;4[6;42H[52;70H          [6;42H[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H153,32[8C66%[6;32H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H156,42[8C67%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 2 of 8:[52;80H[K[52;80H159,42[8C68%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H162,42[8C70%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H165,10[8C71%[6;10H[?25h[?25l[52;70H^[[6;10H[52;72H[[6;10H[52;73H<[6;10H[52;74H6[6;10H[52;75H5[6;10H[52;76H;[6;10H[52;77H4[6;10H[52;78H9[6;10H[52;79H;[6;10H[52;70H[[<65;49;4[6;10H[52;70H          [6;10H[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H168,42[8C72%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 23 errors in context 3 of 8:
==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[52;80H[K[52;80H171,42[8C74%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)[52;80H[K[52;80H174,42[8C75%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H177,42[8C77%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H180,23[8C78%[6;23H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348== 23 errors in context 4 of 8:
==22348== Invalid read of size 4[52;80H[K[52;80H183,42[8C79%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H186,10[8C81%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H189,38[8C82%[6;38H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 5 of 8:[52;80H[K[52;80H192,42[8C83%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)[52;80H[K[52;80H195,42[8C85%[6;42H[?25h[?25l[52;70H^[[6;42H[52;72H[[6;42H[52;73H<[6;42H[52;74H6[6;42H[52;75H5[6;42H[52;76H;[6;42H[52;77H4[6;42H[52;70H        [6;42H[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H198,42[8C86%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H201,42[8C87%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 6 of 8:[52;80H[K[52;80H204,38[8C89%[6;38H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)[52;80H[K[52;80H207,42[8C90%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H210,42[8C91%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H213,10[8C93%[6;10H[?25h[?25l[52;70H^[[6;10H[52;72H[[6;10H[52;73H<[6;10H[52;74H6[6;10H[52;75H5[6;10H[52;76H;[6;10H[52;70H       [6;10H[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 7 of 8:[52;80H[K[52;80H216,42[8C94%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)[52;80H[K[52;80H219,42[8C95%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)
==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd[52;80H[K[52;80H222,42[8C97%[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H225,10[8C98%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)[52;80H[K[52;80H228,32[8CBot[6;32H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H231,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H234,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H237,38[8CBot[6;38H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H240,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H243,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H246,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H249,38[8CBot[6;38H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H252,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H255,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H258,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,38[8CBot[6;38H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H264,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H267,42[8CBot[6;42H[?25h[?25l[52;70H^[[6;42H[52;72H[[6;42H[52;73H<[6;42H[52;74H6[6;42H[52;75H5[6;42H[52;76H;[6;42H[52;77H4[6;42H[52;70H        [6;42H[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H270,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H273,42[8CBot[6;42H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H273,42[8CBot[3;42H[?25h[?25l[1;51r[1;1H[2M[1;52r[50;1H[94m~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H273,42[8CBot[1;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H^[[1;42H[52;72H[[1;42H[52;73H<[1;42H[52;70H    [1;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H^[[1;42H[52;72H[[1;42H[52;73H<[1;42H[52;74H6[1;42H[52;75H5[1;42H[52;76H;[1;42H[52;70H       [1;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H^[[1;42H[52;72H[[1;42H[52;73H<[1;42H[52;74H6[1;42H[52;75H5[1;42H[52;76H;[1;42H[52;77H4[1;42H[52;70H        [1;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H[[1;42H[52;71H<[1;42H[52;72H6[1;42H[52;73H5[1;42H[52;74H;[1;42H[52;75H4[1;42H[52;76H9[1;42H[52;77H;[1;42H[52;78H4[1;42H[52;79H6[1;42H[52;70H          [1;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H^[[1;42H[52;72H[[1;42H[52;73H<[1;42H[52;74H6[1;42H[52;75H5[1;42H[52;76H;[1;42H[52;70H       [1;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H273,42[8CBot[4;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H273,42[8CBot[7;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)[52;80H[K[52;80H273,42[8CBot[10;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 7 of 8:
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)[52;80H[K[52;80H273,42[8CBot[13;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H273,42[8CBot[16;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H273,42[8CBot[19;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H273,42[8CBot[22;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 6 of 8:
==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)[52;80H[K[52;80H273,42[8CBot[25;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H273,42[8CBot[28;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H273,42[8CBot[31;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H273,42[8CBot[34;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 5 of 8:
==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)[52;80H[K[52;80H273,42[8CBot[37;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H273,42[8CBot[40;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H273,42[8CBot[43;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H273,42[8CBot[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348==
==22348== 23 errors in context 4 of 8:[52;80H[K[52;80H273,42[8CBot[49;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H267,42[8C99%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H264,42[8C98%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)[52;80H[K[52;80H261,38[8C96%[46;38H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== 23 errors in context 3 of 8:
==22348== Invalid read of size 1[52;80H[K[52;80H258,42[8C95%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[52;80H[K[52;80H255,42[8C94%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H252,42[8C92%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 2 of 8:
==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)[52;80H[K[52;80H249,38[8C91%[46;38H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H246,42[8C90%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H243,42[8C88%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109354: free_key_values (bug-program.c:44)
==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at[52;80H[K[52;80H240,42[8C87%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109355: main (bug-program.c:74)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)[52;80H[K[52;80H237,38[8C86%[46;38H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 1 of 8:
==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)[52;80H[K[52;80H234,42[8C84%[46;42H[?25h[?25l[52;70H[[46;42H[52;71H<[46;42H[52;72H6[46;42H[52;73H4[46;42H[52;74H;[46;42H[52;75H4[46;42H[52;76H9[46;42H[52;77H;[46;42H[52;78H4[46;42H[52;79H6[46;42H[52;70H          [46;42H[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
==22348==[52;80H[K[52;80H231,42[8C83%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==      possibly lost: 0 bytes in 0 blocks
==22348==    still reachable: 0 bytes in 0 blocks
==22348==[9Csuppressed: 0 bytes in 0 blocks[52;80H[K[52;80H228,32[8C81%[46;32H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== LEAK SUMMARY:
==22348==    definitely lost: 100 bytes in 23 blocks
==22348==    indirectly lost: 0 bytes in 0 blocks[52;80H[K[52;80H225,10[8C80%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H222,42[8C79%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H219,42[8C77%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Searching for pointers to 23 not-freed blocks
==22348== Checked 67,832 bytes
==22348==[52;80H[K[52;80H216,42[8C76%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==     in use at exit: 100 bytes in 23 blocks
==22348==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==22348==[52;80H[K[52;80H213,10[8C75%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348==
==22348== HEAP SUMMARY:[52;80H[K[52;80H210,42[8C73%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H207,42[8C72%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H204,38[8C71%[46;38H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H201,42[8C69%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)[52;80H[K[52;80H198,42[8C68%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H195,42[8C67%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H192,42[8C65%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H189,38[8C64%[46;38H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[4;1Hcpy)[52;80H[K[52;80H185,42[8C62%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H182,42[8C61%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H179,10[8C60%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)[52;80H[K[52;80H176,42[8C58%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)[52;80H[K[52;80H173,10[8C57%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H170,10[8C56%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H167,23[8C54%[46;23H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348== Invalid read of size 4[52;80H[K[52;80H164,42[8C53%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H161,42[8C52%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H158,42[8C50%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)[52;80H[K[52;80H155,42[8C49%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H152,42[8C47%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H149,42[8C46%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)[52;80H[K[52;80H146,42[8C45%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H143,42[8C43%[45;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H141,42[8C42%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H137,42[8C41%[45;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)[52;80H[K[52;80H135,42[8C40%[46;42H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[2;1H)
--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)[52;80H[K[52;80H131,42[8C38%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H128,42[8C37%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H125,42[8C35%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H122,32[8C34%[46;32H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H119,42[8C33%[46;42H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[4;1Happer)[52;80H[K[52;80H115,42[8C31%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H112,33[8C30%[46;33H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H109,42[8C29%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H106,42[8C27%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H103,42[8C26%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H100,42[8C25%[46;42H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [2;1H..
--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H96,42[9C23%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so[52;80H[K[52;80H93,42[9C22%[46;42H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H==22348== WARNING: new redirection conflicts with existing -- ignoring it
--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[3;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen[52;80H[K[52;80H89,42[9C20%[46;42H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [3;1H..
--22348--   .. build-id is valid[52;80H[K[52;80H86,42[9C19%[46;42H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [3;1H..
--22348--   .. build-id is valid[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H81,42[9C17%[45;42H[?25h[?25l[1;51r[1;1H[5L[1;52r[1;1H==22348==
--22348-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[3;1Hlinux_REDIR_FOR_strlen)
--22348-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[5;1Hinux_REDIR_FOR_index)[52;80H[K[52;80H77,42[9C16%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== and then give GDB the following command
==22348==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348
==22348== --pid is optional if only one valgrind process is running[52;80H[K[52;80H74,42[9C15%[45;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==22348==   /path/to/gdb ./bug-program[52;80H[K[52;80H72,42[9C13%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== don't want to do, unless you know exactly what you're doing,
==22348== or are doing some strange experiment):
==22348==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348 ...command...[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H68,42[9C12%[45;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-22348-by-qxiong1-on-???[2;1H==22348==
==22348== TO CONTROL THIS PROCESS USING vgdb (which you probably[52;80H[K[52;80H66,42[9C11%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==22348== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-22348-by-qxiong1-on-???
==22348== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-22348-by-qxiong1-on-???[52;80H[K[52;80H63,42[9C10%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348--   .. build-id is valid
--22348--    object doesn't have a dynamic symbol table
--22348-- Scheduler: using generic scheduler lock implementation.[52;80H[K[52;80H60,42[10C8%[46;42H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--22348--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [4;1H..[52;80H[K[52;80H56,42[10C7%[46;42H[?25h[?25l[1;51r[1;1H[5L[1;52r[1;1H--22348-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[2;1H-program
--22348-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [5;1H..[52;80H[K[52;80H52,42[10C6%[46;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--22348-- Page sizes: currently 4096, max supported 4096
--22348-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H48,42[10C4%[44;42H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- Contents of /proc/version:
--22348--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[3;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--22348--[52;80H[K[52;80H46,42[10C3%[45;42H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- Valgrind options:
--22348--    -v
--22348--    --leak-check=yes[52;80H[K[52;80H44,32[10C2%[46;32H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[2;1H==22348== Command: ./bug-program
==22348==[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H41,42[10C0%[44;42H[?25h[?25l[1;51r[1;1H[2L[1;52r[1;1H==22348== Memcheck, a memory error detector
==22348== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.[52;80H[K[52;80H40,42[9CTop[44;42H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[27m[23m[29m[m[H[2J[?25l[1;1H==22348== Memcheck, a memory error detector
==22348== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22348== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[4;1H==22348== Command: ./bug-program
==22348==
--22348-- Valgrind options:
--22348--    -v
--22348--    --leak-check=yes
--22348-- Contents of /proc/version:
--22348--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[11;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--22348--
--22348-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--22348-- Page sizes: currently 4096, max supported 4096
--22348-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--22348-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[17;1H-program
--22348-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [20;1H..
--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--22348--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [24;1H..
--22348--   .. build-id is valid
--22348--    object doesn't have a dynamic symbol table
--22348-- Scheduler: using generic scheduler lock implementation.
--22348-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==22348== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-22348-by-qxiong1-on-???
==22348== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-22348-by-qxiong1-on-???
==22348== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-22348-by-qxiong1-on-???[32;1H==22348==
==22348== TO CONTROL THIS PROCESS USING vgdb (which you probably
==22348== don't want to do, unless you know exactly what you're doing,
==22348== or are doing some strange experiment):
==22348==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348 ...command...
==22348==
==22348== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==22348==   /path/to/gdb ./bug-program
==22348== and then give GDB the following command
==22348==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348
==22348== --pid is optional if only one valgrind process is running
==22348==
--22348-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[45;1Hlinux_REDIR_FOR_strlen)
--22348-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[47;1Hinux_REDIR_FOR_index)
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [50;1H..
--22348--   .. build-id is valid[52;80H40,42[9CTop[44;42H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H==22348== Memcheck, a memory error detector
==22348== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22348== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[4;1H==22348== Command: ./bug-program
==22348==
--22348-- Valgrind options:
--22348--    -v
--22348--    --leak-check=yes
--22348-- Contents of /proc/version:
--22348--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[11;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--22348--
--22348-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--22348-- Page sizes: currently 4096, max supported 4096
--22348-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--22348-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[17;1H-program
--22348-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [20;1H..
--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--22348--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [24;1H..
--22348--   .. build-id is valid
--22348--    object doesn't have a dynamic symbol table
--22348-- Scheduler: using generic scheduler lock implementation.
--22348-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==22348== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-22348-by-qxiong1-on-???
==22348== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-22348-by-qxiong1-on-???
==22348== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-22348-by-qxiong1-on-???[32;1H==22348==
==22348== TO CONTROL THIS PROCESS USING vgdb (which you probably
==22348== don't want to do, unless you know exactly what you're doing,
==22348== or are doing some strange experiment):
==22348==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348 ...command...
==22348==
==22348== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==22348==   /path/to/gdb ./bug-program
==22348== and then give GDB the following command
==22348==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348
==22348== --pid is optional if only one valgrind process is running
==22348==
--22348-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[45;1Hlinux_REDIR_FOR_strlen)
--22348-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[47;1Hinux_REDIR_FOR_index)
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [50;1H..
--22348--   .. build-id is valid[52;80H40,42[9CTop[44;42H[?25h[?25l[52;80H27,71[31;71H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;81H3,7 [27;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [51;1H..[52;80H[K[52;80H23,7[11C1%[24;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348--   .. build-id is valid
==22348== WARNING: new redirection conflicts with existing -- ignoring it
--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H23,7[11C2%[21;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[48;1H--22348--     old: 0x0401e2f0 (strlen              ) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[49;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)[52;80H[K[52;80H23,7[11C3%[18;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [51;1H..[52;80H[K[52;80H23,7[11C5%[14;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H23,7[11C6%[10;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H23,7[11C7%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H27,7[11C9%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H30,7[10C10%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H33,7[10C11%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[51;1Happer)[52;80H[K[52;80H36,7[10C13%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H39,7[10C14%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H41,7[10C15%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H43,7[10C17%[6;7H[?25h[?25l[1;51r[1;1H[5M[1;52r[47;1H--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[51;1H)[52;80H[K[52;80H47,7[10C18%[7;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1[52;80H[K[52;80H50,7[10C19%[7;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)[52;80H[K[52;80H53,7[10C21%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H56,7[10C22%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)[52;80H[K[52;80H60,7[10C24%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H63,7[10C25%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H66,7[10C26%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348== Invalid write of size 8[52;80H[K[52;80H69,7[10C28%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)[52;80H[K[52;80H72,7[10C29%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H75,7[10C30%[7;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[52;80H[K[52;80H77,7[10C32%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H81,7[10C33%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H84,7[10C34%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)[52;80H[K[52;80H87,7[10C36%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)[52;80H[K[52;80H89,7[10C37%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H93,7[10C39%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H96,7[10C40%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[51;1Hcpy)[52;80H[K[52;80H99,7[10C41%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H102,7[9C43%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H105,7[9C44%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H108,7[9C45%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)[52;80H[K[52;80H111,7[9C47%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H114,7[9C48%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H117,7[9C49%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H120,7[9C51%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== HEAP SUMMARY:[52;80H[K[52;80H123,7[9C52%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==     in use at exit: 100 bytes in 23 blocks
==22348==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==22348==[52;80H[K[52;80H126,7[9C53%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Searching for pointers to 23 not-freed blocks
==22348== Checked 67,832 bytes
==22348==[52;80H[K[52;80H129,7[9C55%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H132,7[9C56%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H135,7[9C57%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== LEAK SUMMARY:
==22348==    definitely lost: 100 bytes in 23 blocks
==22348==    indirectly lost: 0 bytes in 0 blocks[52;80H[K[52;80H138,7[9C59%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==      possibly lost: 0 bytes in 0 blocks
==22348==    still reachable: 0 bytes in 0 blocks
==22348==[9Csuppressed: 0 bytes in 0 blocks[52;80H[K[52;80H141,7[9C60%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
==22348==[52;80H[K[52;80H144,7[9C61%[7;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 23 errors in context 1 of 8:
==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)[52;80H[K[52;80H146,7[9C63%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x109355: main (bug-program.c:74)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H150,7[9C64%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H153,7[9C66%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H156,7[9C67%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 2 of 8:[52;80H[K[52;80H159,7[9C68%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H162,7[9C70%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H165,7[9C71%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H168,7[9C72%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 23 errors in context 3 of 8:
==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[52;80H[K[52;80H171,7[9C74%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)[52;80H[K[52;80H174,7[9C75%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H177,7[9C77%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H180,7[9C78%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348== 23 errors in context 4 of 8:
==22348== Invalid read of size 4[52;80H[K[52;80H183,7[9C79%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H186,7[9C81%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H189,7[9C82%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 5 of 8:[52;80H[K[52;80H192,7[9C83%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)[52;80H[K[52;80H195,7[9C85%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H198,7[9C86%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H201,7[9C87%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 6 of 8:[52;80H[K[52;80H204,7[9C89%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)[52;80H[K[52;80H207,7[9C90%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H210,7[9C91%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H213,7[9C93%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 7 of 8:[52;80H[K[52;80H216,7[9C94%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)[52;80H[K[52;80H219,7[9C95%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)
==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd[52;80H[K[52;80H222,7[9C97%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H225,7[9C98%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)[52;80H[K[52;80H228,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H231,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H234,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H237,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H240,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H243,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H246,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H249,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H252,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H255,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H258,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H264,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H267,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H270,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H273,7[9CBot[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H273,7[9CBot[3;7H[?25h[?25l[1;51r[1;1H[2M[1;52r[50;1H[94m~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H273,7[9CBot[1;7H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H273,7[9CBot[4;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H273,7[9CBot[7;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)[52;80H[K[52;80H273,7[9CBot[10;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 7 of 8:
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)[52;80H[K[52;80H273,7[9CBot[13;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H273,7[9CBot[16;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H273,7[9CBot[19;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H273,7[9CBot[22;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 6 of 8:
==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)[52;80H[K[52;80H273,7[9CBot[25;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H273,7[9CBot[28;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H273,7[9CBot[31;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H273,7[9CBot[34;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 5 of 8:
==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)[52;80H[K[52;80H273,7[9CBot[37;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H273,7[9CBot[40;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H273,7[9CBot[43;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H273,7[9CBot[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348==
==22348== 23 errors in context 4 of 8:[52;80H[K[52;80H273,7[9CBot[49;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H267,7[9C99%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H264,7[9C98%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)[52;80H[K[52;80H261,7[9C96%[46;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H261,7[9C98%[43;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H261,7[9C99%[40;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
[94m~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[37;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[34;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[31;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[28;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[25;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[22;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[19;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[16;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,7[9CBot[13;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H261,7[9CBot[16;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H261,7[9CBot[19;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H261,7[9CBot[22;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 5 of 8:
==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)[52;80H[K[52;80H261,7[9CBot[25;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H261,7[9CBot[28;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H261,7[9CBot[31;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H261,7[9CBot[34;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348==
==22348== 23 errors in context 4 of 8:[52;80H[K[52;80H261,7[9CBot[37;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H261,7[9C99%[40;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H261,7[9C98%[43;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)[52;80H[K[52;80H261,7[9C96%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== 23 errors in context 3 of 8:
==22348== Invalid read of size 1[52;80H[K[52;80H258,7[9C95%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[52;80H[K[52;80H255,7[9C94%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H252,7[9C92%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 2 of 8:
==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)[52;80H[K[52;80H249,7[9C91%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H246,7[9C90%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H243,7[9C88%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109354: free_key_values (bug-program.c:44)
==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at[52;80H[K[52;80H240,7[9C87%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109355: main (bug-program.c:74)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)[52;80H[K[52;80H237,7[9C86%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 23 errors in context 1 of 8:
==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)[52;80H[K[52;80H234,7[9C84%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
==22348==[52;80H[K[52;80H231,7[9C83%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==      possibly lost: 0 bytes in 0 blocks
==22348==    still reachable: 0 bytes in 0 blocks
==22348==[9Csuppressed: 0 bytes in 0 blocks[52;80H[K[52;80H228,7[9C81%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== LEAK SUMMARY:
==22348==    definitely lost: 100 bytes in 23 blocks
==22348==    indirectly lost: 0 bytes in 0 blocks[52;80H[K[52;80H225,7[9C80%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H222,7[9C79%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H219,7[9C77%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Searching for pointers to 23 not-freed blocks
==22348== Checked 67,832 bytes
==22348==[52;80H[K[52;80H216,7[9C76%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==     in use at exit: 100 bytes in 23 blocks
==22348==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==22348==[52;80H[K[52;80H213,7[9C75%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348==
==22348== HEAP SUMMARY:[52;80H[K[52;80H210,7[9C73%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H207,7[9C72%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H204,7[9C71%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H201,7[9C69%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)[52;80H[K[52;80H198,7[9C68%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H195,7[9C67%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H192,7[9C65%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H189,7[9C64%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[4;1Hcpy)[52;80H[K[52;80H185,7[9C62%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H182,7[9C61%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H179,7[9C60%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)[52;80H[K[52;80H176,7[9C58%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)[52;80H[K[52;80H173,7[9C57%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H170,7[9C56%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H167,7[9C54%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348== Invalid read of size 4[52;80H[K[52;80H164,7[9C53%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H161,7[9C52%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H158,7[9C50%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)[52;80H[K[52;80H155,7[9C49%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H152,7[9C47%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H149,7[9C46%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)[52;80H[K[52;80H146,7[9C45%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H143,7[9C43%[45;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H141,7[9C42%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H137,7[9C41%[45;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)[52;80H[K[52;80H135,7[9C40%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[2;1H)
--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)[52;80H[K[52;80H131,7[9C38%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H128,7[9C37%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H125,7[9C35%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H122,7[9C34%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H119,7[9C33%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[4;1Happer)[52;80H[K[52;80H115,7[9C31%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H112,7[9C30%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H109,7[9C29%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H106,7[9C27%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H103,7[9C26%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H100,7[9C25%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [2;1H..
--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H96,7[10C23%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so[52;80H[K[52;80H93,7[10C22%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H==22348== WARNING: new redirection conflicts with existing -- ignoring it
--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[3;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen[52;80H[K[52;80H89,7[10C20%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [3;1H..
--22348--   .. build-id is valid[52;80H[K[52;80H86,7[10C19%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [3;1H..
--22348--   .. build-id is valid[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H81,7[10C17%[45;7H[?25h[?25l[1;51r[1;1H[5L[1;52r[1;1H==22348==
--22348-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[3;1Hlinux_REDIR_FOR_strlen)
--22348-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[5;1Hinux_REDIR_FOR_index)[52;80H[K[52;80H77,7[10C16%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== and then give GDB the following command
==22348==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348
==22348== --pid is optional if only one valgrind process is running[52;80H[K[52;80H74,7[10C15%[45;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==22348==   /path/to/gdb ./bug-program[52;80H[K[52;80H72,7[10C13%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== don't want to do, unless you know exactly what you're doing,
==22348== or are doing some strange experiment):
==22348==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=22348 ...command...[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H68,7[10C12%[45;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-22348-by-qxiong1-on-???[2;1H==22348==
==22348== TO CONTROL THIS PROCESS USING vgdb (which you probably[52;80H[K[52;80H66,7[10C11%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==22348== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-22348-by-qxiong1-on-???
==22348== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-22348-by-qxiong1-on-???[52;80H[K[52;80H63,7[10C10%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348--   .. build-id is valid
--22348--    object doesn't have a dynamic symbol table
--22348-- Scheduler: using generic scheduler lock implementation.[52;80H[K[52;80H60,7[11C8%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--22348--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [4;1H..[52;80H[K[52;80H56,7[11C7%[46;7H[?25h[?25l[1;51r[1;1H[5L[1;52r[1;1H--22348-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[2;1H-program
--22348-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [5;1H..[52;80H[K[52;80H52,7[11C6%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--22348-- Page sizes: currently 4096, max supported 4096
--22348-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H48,7[11C4%[44;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- Contents of /proc/version:
--22348--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[3;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--22348--[52;80H[K[52;80H46,7[11C3%[45;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- Valgrind options:
--22348--    -v
--22348--    --leak-check=yes[52;80H[K[52;80H44,7[11C2%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[2;1H==22348== Command: ./bug-program
==22348==[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H41,7[11C0%[44;7H[?25h[?25l[1;51r[1;1H[2L[1;52r[1;1H==22348== Memcheck, a memory error detector
==22348== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.[52;80H[K[52;80H40,7[10CTop[44;7H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [51;1H..[52;80H[K[52;80H40,7[11C1%[41;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348--   .. build-id is valid
==22348== WARNING: new redirection conflicts with existing -- ignoring it
--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H40,7[11C2%[38;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[48;1H--22348--     old: 0x0401e2f0 (strlen              ) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[49;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)[52;80H[K[52;80H40,7[11C3%[35;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--22348-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--22348--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [51;1H..[52;80H[K[52;80H40,7[11C5%[31;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348--   .. build-id is valid
--22348-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,7[11C6%[27;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,7[11C7%[23;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,7[11C9%[19;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,7[10C10%[16;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,7[10C11%[13;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[51;1Happer)[52;80H[K[52;80H40,7[10C13%[10;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,7[10C14%[7;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H41,7[10C15%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H43,7[10C17%[6;7H[?25h[?25l[1;51r[1;1H[5M[1;52r[47;1H--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[51;1H)[52;80H[K[52;80H47,7[10C18%[7;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1[52;80H[K[52;80H50,7[10C19%[7;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)[52;80H[K[52;80H53,7[10C21%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H56,7[10C22%[6;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[2;1HREDIR_FOR_strlen
--22348--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--22348-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)[52;80H[K[52;80H56,7[10C21%[10;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [2;1H..
--22348--   .. build-id is valid
==22348== WARNING: new redirection conflicts with existing -- ignoring it[52;80H[K[52;80H56,7[10C19%[14;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [2;1H..
--22348--   .. build-id is valid
--22348-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so[52;80H[K[52;80H56,7[10C18%[18;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==22348== Invalid write of size 1[52;80H[K[52;80H56,7[10C19%[14;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)
==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)[52;80H[K[52;80H56,7[10C21%[10;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H56,7[10C22%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== Invalid write of size 4
==22348==    at 0x109312: add_key_value (bug-program.c:33)[52;80H[K[52;80H60,7[10C24%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)
==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H63,7[10C25%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H66,7[10C26%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348== Invalid write of size 8[52;80H[K[52;80H69,7[10C28%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)
==22348==    by 0x109315: main (bug-program.c:70)[52;80H[K[52;80H72,7[10C29%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H75,7[10C30%[7;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[52;80H[K[52;80H77,7[10C32%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H81,7[10C33%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H84,7[10C34%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)[52;80H[K[52;80H87,7[10C36%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)[52;80H[K[52;80H89,7[10C37%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H93,7[10C39%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H96,7[10C40%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[51;1Hcpy)[52;80H[K[52;80H99,7[10C41%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H102,7[9C43%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H105,7[9C44%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H108,7[9C45%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)[52;80H[K[52;80H111,7[9C47%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H114,7[9C48%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H117,7[9C49%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H120,7[9C51%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== HEAP SUMMARY:[52;80H[K[52;80H123,7[9C52%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==     in use at exit: 100 bytes in 23 blocks
==22348==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==22348==[52;80H[K[52;80H126,7[9C53%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Searching for pointers to 23 not-freed blocks
==22348== Checked 67,832 bytes
==22348==[52;80H[K[52;80H129,7[9C55%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H132,7[9C56%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H135,7[9C57%[6;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[52;80H[K[52;80H135,7[9C56%[9;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H135,7[9C55%[12;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==
==22348== Invalid read of size 4
==22348==    at 0x109330: main (bug-program.c:72)[52;80H[K[52;80H135,7[9C53%[15;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H135,7[9C52%[18;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x109315: main (bug-program.c:70)
==22348==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H135,7[9C51%[21;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid write of size 8
==22348==    at 0x109315: add_key_value (bug-program.c:33)
==22348==    by 0x109315: make_key_values (bug-program.c:61)[52;80H[K[52;80H135,7[9C49%[24;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==[52;80H[K[52;80H135,7[9C48%[27;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H135,7[9C47%[30;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x109312: add_key_value (bug-program.c:33)
==22348==    by 0x109312: make_key_values (bug-program.c:61)
==22348==    by 0x109312: main (bug-program.c:70)[52;80H[K[52;80H135,7[9C45%[33;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== Invalid write of size 4[52;80H[K[52;80H135,7[9C44%[36;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H135,7[9C43%[39;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x10930E: make_key_values (bug-program.c:61)
==22348==    by 0x10930E: main (bug-program.c:70)
==22348==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd[52;80H[K[52;80H135,7[9C41%[42;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348== Invalid write of size 1
==22348==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==22348==    by 0x10930E: add_key_value (bug-program.c:30)[52;80H[K[52;80H135,7[9C40%[45;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--22348-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--22348-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)[52;80H[K[52;80H133,7[9C39%[46;7H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--22348-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[4;1H)[52;80H[K[52;80H129,7[9C37%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H126,7[9C36%[46;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--22348-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--22348-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[3;1H--22348-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H123,7[9C34%[46;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
--22348-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--22348-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)[52;80H[K[52;80H123,7[9C36%[43;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)[52;80H[K[52;80H123,7[9C37%[40;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)
==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H123,7[9C39%[36;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H123,7[9C40%[33;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
--22348-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[51;1Hcpy)[52;80H[K[52;80H123,7[9C41%[30;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H123,7[9C43%[27;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H123,7[9C44%[24;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
--22348-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H123,7[9C45%[21;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)
==22348==    by 0x109355: main (bug-program.c:74)[52;80H[K[52;80H123,7[9C47%[18;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H123,7[9C48%[15;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H123,7[9C49%[12;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H123,7[9C51%[9;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== HEAP SUMMARY:[52;80H[K[52;80H123,7[9C52%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==     in use at exit: 100 bytes in 23 blocks
==22348==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==22348==[52;80H[K[52;80H126,7[9C53%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Searching for pointers to 23 not-freed blocks
==22348== Checked 67,832 bytes
==22348==[52;80H[K[52;80H129,7[9C55%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H132,7[9C56%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H135,7[9C57%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== LEAK SUMMARY:
==22348==    definitely lost: 100 bytes in 23 blocks
==22348==    indirectly lost: 0 bytes in 0 blocks[52;80H[K[52;80H138,7[9C59%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==      possibly lost: 0 bytes in 0 blocks
==22348==    still reachable: 0 bytes in 0 blocks
==22348==[9Csuppressed: 0 bytes in 0 blocks[52;80H[K[52;80H141,7[9C60%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
==22348==[52;80H[K[52;80H144,7[9C61%[7;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 23 errors in context 1 of 8:
==22348== Invalid read of size 8
==22348==    at 0x109355: free_key_values (bug-program.c:43)[52;80H[K[52;80H146,7[9C63%[6;7H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==22348==    by 0x109355: main (bug-program.c:74)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==22348==    at 0x48369AB: free (vg_replace_malloc.c:530)
==22348==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H150,7[9C64%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x109354: main (bug-program.c:74)
==22348==  Block was alloc'd at
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H153,7[9C66%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H156,7[9C67%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 2 of 8:[52;80H[K[52;80H159,7[9C68%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== Invalid read of size 8
==22348==    at 0x109344: main (bug-program.c:71)
==22348==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H162,7[9C70%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H165,7[9C71%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: main (bug-program.c:70)
==22348==
==22348==[52;80H[K[52;80H168,7[9C72%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348== 23 errors in context 3 of 8:
==22348== Invalid read of size 1
==22348==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[52;80H[K[52;80H171,7[9C74%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==22348==    by 0x48D3605: printf (printf.c:33)
==22348==    by 0x109343: main (bug-program.c:72)[52;80H[K[52;80H174,7[9C75%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H177,7[9C77%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092F6: make_key_values (bug-program.c:61)
==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==[52;80H[K[52;80H180,7[9C78%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348== 23 errors in context 4 of 8:
==22348== Invalid read of size 4[52;80H[K[52;80H183,7[9C79%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    at 0x109330: main (bug-program.c:72)
==22348==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H186,7[9C81%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==    by 0x1092D3: add_key_value (bug-program.c:21)
==22348==    by 0x1092D3: make_key_values (bug-program.c:61)
==22348==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H189,7[9C82%[6;7H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==22348==
==22348==
==22348== 23 errors in context 5 of 8:[52;80H[K[52;80H192,7[9C83%[6;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    still reachable: 0 bytes in 0 blocks
==22348==[9Csuppressed: 0 bytes in 0 blocks
==22348==[52;80H[K[52;80H192,7[9C82%[9;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    definitely lost: 100 bytes in 23 blocks
==22348==    indirectly lost: 0 bytes in 0 blocks
==22348==      possibly lost: 0 bytes in 0 blocks[52;80H[K[52;80H192,7[9C81%[12;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    by 0x1092F6: main (bug-program.c:70)
==22348==
==22348== LEAK SUMMARY:[52;80H[K[52;80H192,7[9C79%[15;7H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==22348==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==22348==    by 0x1092F6: add_key_value (bug-program.c:24)
==22348==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H192,7[9C78%[18;7H[?25h[?25l[52;82H1,13[17;13H[?25h[?25l[52;70H2[17;14H[47m [m[52;1H[1m-- VISUAL --[m[52;70H[K[52;70H2[17;14H[52;80H191,14[8C78%[17;14H[?25h[?25l[52;70H3[17;15H[47ma[m[52;85H5[17;15H[?25h[?25l[52;70H4[17;16H[47mt[m[52;85H6[17;16H[?25h[?25l[52;70H5[17;17H[47m [m[52;85H7[17;17H[?25h[?25l[52;70H6[17;18H[47m0[m[52;85H8[17;18H[?25h[?25l[52;70H7[17;19H[47mx[m[52;85H9[17;19H[?25h[?25l[52;70H8[17;20H[47m1[m[52;84H20[17;20H[?25h[?25l[52;70H9[17;21H[47m0[m[52;85H1[17;21H[?25h[?25l[52;70H10[17;22H[47m9[m[52;85H2[17;22H[?25h[?25l[52;71H1[17;23H[47m3[m[52;85H3[17;23H[?25h[?25l[52;70H2 [18;23H[17;23H[47m55: free_key_values (bug-program.c:43) 
==22348==    by 0x1093[m[52;82H2[18;23H[?25h[?25l5[47m5[m[52;85H4[18;24H[?25h[?25l5[47m5[m[52;85H5[18;25H[?25h[?25l:[47m:[m[52;85H6[18;26H[?25h[?25l [47m [m[52;85H7[18;27H[?25h[?25lm[47mm[m[52;85H8[18;28H[?25h[?25la[47ma[m[52;85H9[18;29H[?25h[?25li[47mi[m[52;84H30[18;30H[?25h[?25ln[47mn[m[52;85H1[18;31H[?25h[?25l [47m [m[106m([16C)[m[52;85H2[18;32H[?25h[?25l[?25h[?25l[52;70H [19;51H[17;13H at 0x109355: free_key_values (bug-program.c:43)[17;61H[K[18;1H==22348==    by 0x109355: main ([16C)[52;1H[K[52;80H193,51[8C78%[19;51H[?25h[?25l[52;70H5[19;53H[47mbloc[m[52;1H[1m-- VISUAL --[m[52;70H[K[52;70H5[19;53H[52;80H193,53[8C78%[19;53H[?25h[?25l[?25h[?25l[52;70H [16;32H[19;49Hbloc[52;1H[K[52;80H190,32[8C78%[16;32H[?25h[?25l[52;80H203,10[29;10H[?25h[?25l[52;1HType  :qa!  and press <Enter> to abandon all changes and exit Vim[52;80H[K[52;80H203,10[8C78%[29;10H[?25h[?25l[52;70H:[29;10H[52;1H[K[52;1H:[?2004h[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t[52;1H[K[52;1H[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ ls
bug-program  bug-program.c  bug-program.valgrind  Makefile
qxiong1@remote05:~/i220b/work/lab6/bug-program$ vim bug-program/[K.valgrind 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"bug-program.valgrind" 273L, 15943C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H==31028==    by 0x1092F6: main (bug-program.c:70)
==31028==
==31028== LEAK SUMMARY:
==31028==    definitely lost: 100 bytes in 23 blocks
==31028==    indirectly lost: 0 bytes in 0 blocks
==31028==      possibly lost: 0 bytes in 0 blocks
==31028==    still reachable: 0 bytes in 0 blocks
==31028==[9Csuppressed: 0 bytes in 0 blocks
==31028==
==31028== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
==31028==
==31028== 23 errors in context 1 of 8:
==31028== Invalid read of size 8
==31028==    at 0x109355: free_key_values (bug-program.c:43)
==31028==    by 0x109355: main (bug-program.c:74)
==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31028==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31028==    by 0x109354: free_key_values (bug-program.c:44)
==31028==    by 0x109354: main (bug-program.c:74)
==31028==  Block was alloc'd at
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==
==31028==
==31028== 23 errors in context 2 of 8:
==31028== Invalid read of size 8
==31028==    at 0x109344: main (bug-program.c:71)
==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==
==31028==
==31028== 23 errors in context 3 of 8:
==31028== Invalid read of size 1
==31028==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==31028==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==31028==    by 0x48D3605: printf (printf.c:33)
==31028==    by 0x109343: main (bug-program.c:72)
==31028==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092F6: add_key_value (bug-program.c:24)
==31028==    by 0x1092F6: make_key_values (bug-program.c:61)
==31028==    by 0x1092F6: main (bug-program.c:70)
==31028==
==31028==
==31028== 23 errors in context 4 of 8:
==31028== Invalid read of size 4[52;80H203,10[8C79%[26;10H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092F6: add_key_value (bug-program.c:24)
==31028==    by 0x1092F6: make_key_values (bug-program.c:61)[52;1H[K[52;80H203,10[8C78%[29;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028== Checked 67,832 bytes
==31028==
==31028== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1[52;80H[K[52;80H203,10[8C77%[32;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==31028==
==31028== Searching for pointers to 23 not-freed blocks[52;80H[K[52;80H203,10[8C75%[35;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==
==31028== HEAP SUMMARY:
==31028==     in use at exit: 100 bytes in 23 blocks[52;80H[K[52;80H203,10[8C74%[38;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==[52;80H[K[52;80H203,10[8C72%[41;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==  Block was alloc'd at
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H203,10[8C71%[44;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31028==    by 0x109354: free_key_values (bug-program.c:44)
==31028==    by 0x109354: main (bug-program.c:74)[52;80H[K[52;80H202,10[8C70%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    at 0x109355: free_key_values (bug-program.c:43)
==31028==    by 0x109355: main (bug-program.c:74)
==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd[52;80H[K[52;80H199,10[8C68%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==
--31028-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)
==31028== Invalid read of size 8[52;80H[K[52;80H196,10[8C67%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H193,10[8C66%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    at 0x109344: main (bug-program.c:71)
==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H190,10[8C64%[46;10H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H==31028==
--31028-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[3;1Hcpy)
==31028== Invalid read of size 8[52;80H[K[52;80H186,10[8C63%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092F6: add_key_value (bug-program.c:24)
==31028==    by 0x1092F6: make_key_values (bug-program.c:61)
==31028==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H183,10[8C61%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x109343: main (bug-program.c:72)
==31028==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H180,10[8C60%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==31028==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==31028==    by 0x48D3605: printf (printf.c:33)[52;80H[K[52;80H177,10[8C59%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--31028-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
==31028== Invalid read of size 1[52;80H[K[52;80H174,10[8C57%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==[52;80H[K[52;80H171,10[8C56%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H168,10[8C55%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==
==31028== Invalid read of size 4
==31028==    at 0x109330: main (bug-program.c:72)[52;80H[K[52;80H165,10[8C53%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H162,10[8C52%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x109315: main (bug-program.c:70)
==31028==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H159,10[8C51%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028== Invalid write of size 8
==31028==    at 0x109315: add_key_value (bug-program.c:33)
==31028==    by 0x109315: make_key_values (bug-program.c:61)[52;80H[K[52;80H156,10[8C49%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==[52;80H[K[52;80H153,10[8C48%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H150,10[8C47%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    at 0x109312: add_key_value (bug-program.c:33)
==31028==    by 0x109312: make_key_values (bug-program.c:61)
==31028==    by 0x109312: main (bug-program.c:70)[52;80H[K[52;80H147,10[8C45%[46;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Invalid read of size 8
==31028==    at 0x109355: free_key_values (bug-program.c:43)
==31028==    by 0x109355: main (bug-program.c:74)[52;80H[K[52;80H147,10[8C47%[43;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31028==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31028==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H147,10[8C48%[40;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x109354: main (bug-program.c:74)
==31028==  Block was alloc'd at
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H147,10[8C49%[37;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H147,10[8C51%[34;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
==31028==
==31028== HEAP SUMMARY:[52;80H[K[52;80H147,10[8C52%[31;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==     in use at exit: 100 bytes in 23 blocks
==31028==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==31028==[52;80H[K[52;80H147,10[8C53%[28;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Searching for pointers to 23 not-freed blocks
==31028== Checked 67,832 bytes
==31028==[52;80H[K[52;80H147,10[8C55%[25;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H147,10[8C56%[22;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092F6: make_key_values (bug-program.c:61)
==31028==    by 0x1092F6: main (bug-program.c:70)
==31028==[52;80H[K[52;80H147,10[8C57%[19;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== LEAK SUMMARY:
==31028==    definitely lost: 100 bytes in 23 blocks
==31028==    indirectly lost: 0 bytes in 0 blocks[52;80H[K[52;80H147,10[8C59%[16;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--31028-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
==31028== Invalid read of size 1[52;80H[K[52;80H147,10[8C57%[19;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==[52;80H[K[52;80H147,10[8C56%[22;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H147,10[8C55%[25;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==
==31028== Invalid read of size 4
==31028==    at 0x109330: main (bug-program.c:72)[52;80H[K[52;80H147,10[8C53%[28;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H147,10[8C52%[31;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x109315: main (bug-program.c:70)
==31028==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H147,10[8C51%[34;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028== Invalid write of size 8
==31028==    at 0x109315: add_key_value (bug-program.c:33)
==31028==    by 0x109315: make_key_values (bug-program.c:61)[52;80H[K[52;80H147,10[8C49%[37;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==[52;80H[K[52;80H147,10[8C48%[40;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H147,10[8C47%[43;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    at 0x109312: add_key_value (bug-program.c:33)
==31028==    by 0x109312: make_key_values (bug-program.c:61)
==31028==    by 0x109312: main (bug-program.c:70)[52;80H[K[52;80H147,10[8C45%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092F6: main (bug-program.c:70)
==31028==
==31028== Invalid write of size 4[52;80H[K[52;80H144,10[8C44%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092F6: add_key_value (bug-program.c:24)
==31028==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H142,10[8C43%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x10930E: make_key_values (bug-program.c:61)
==31028==    by 0x10930E: main (bug-program.c:70)
==31028==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd[52;80H[K[52;80H139,10[8C41%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028== Invalid write of size 1
==31028==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==31028==    by 0x10930E: add_key_value (bug-program.c:30)[52;80H[K[52;80H136,10[8C40%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--31028-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--31028-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)[52;80H[K[52;80H133,10[8C39%[46;10H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31028-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[4;1H)[52;80H[K[52;80H129,10[8C37%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H126,10[8C36%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[3;1H--31028-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H123,10[8C34%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H120,10[8C33%[46;10H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31028-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[3;1Happer)
--31028-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H116,10[8C32%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H113,10[8C30%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H110,10[8C29%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H107,10[8C28%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H104,10[8C26%[46;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31028-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31028-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H101,10[8C25%[46;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H101,10[8C26%[43;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==
==31028== Invalid write of size 8[52;80H[K[52;80H101,10[8C28%[40;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    at 0x109315: add_key_value (bug-program.c:33)
==31028==    by 0x109315: make_key_values (bug-program.c:61)
==31028==    by 0x109315: main (bug-program.c:70)[52;80H[K[52;80H101,10[8C29%[37;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H101,10[8C30%[34;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==[52;80H[K[52;80H101,10[8C32%[31;10H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31028== Invalid read of size 4
==31028==    at 0x109330: main (bug-program.c:72)
==31028==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H101,10[8C33%[27;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H101,10[8C34%[24;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
--31028-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--31028-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)[52;80H[K[52;80H101,10[8C36%[21;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Invalid read of size 1
==31028==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==31028==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)[52;80H[K[52;80H101,10[8C37%[18;10H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31028==    by 0x48D3605: printf (printf.c:33)
==31028==    by 0x109343: main (bug-program.c:72)
==31028==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H101,10[8C39%[14;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092F6: add_key_value (bug-program.c:24)
==31028==    by 0x1092F6: make_key_values (bug-program.c:61)
==31028==    by 0x1092F6: main (bug-program.c:70)[52;80H[K[52;80H101,10[8C40%[11;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
--31028-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[51;1Hcpy)[52;80H[K[52;80H101,10[8C41%[8;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Invalid read of size 8
==31028==    at 0x109344: main (bug-program.c:71)
==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H102,10[8C43%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H105,10[8C44%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==
--31028-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H108,10[8C45%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Invalid read of size 8
==31028==    at 0x109355: free_key_values (bug-program.c:43)
==31028==    by 0x109355: main (bug-program.c:74)[52;80H[K[52;80H111,10[8C47%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31028==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31028==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H114,10[8C48%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x109354: main (bug-program.c:74)
==31028==  Block was alloc'd at
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H117,10[8C49%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H120,10[8C51%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
==31028==
==31028== HEAP SUMMARY:[52;80H[K[52;80H123,10[8C52%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==     in use at exit: 100 bytes in 23 blocks
==31028==   total heap usage: 47 allocs, 24 frees, 1,308 bytes allocated
==31028==[52;80H[K[52;80H126,10[8C53%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Searching for pointers to 23 not-freed blocks
==31028== Checked 67,832 bytes
==31028==[52;80H[K[52;80H129,10[8C55%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== 100 bytes in 23 blocks are definitely lost in loss record 1 of 1
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H132,10[8C56%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092F6: make_key_values (bug-program.c:61)
==31028==    by 0x1092F6: main (bug-program.c:70)
==31028==[52;80H[K[52;80H135,10[8C57%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== LEAK SUMMARY:
==31028==    definitely lost: 100 bytes in 23 blocks
==31028==    indirectly lost: 0 bytes in 0 blocks[52;80H[K[52;80H138,10[8C59%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==      possibly lost: 0 bytes in 0 blocks
==31028==    still reachable: 0 bytes in 0 blocks
==31028==[9Csuppressed: 0 bytes in 0 blocks[52;80H[K[52;80H141,10[8C60%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
==31028== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)
==31028==[52;80H[K[52;80H144,10[8C61%[7;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== 23 errors in context 1 of 8:
==31028== Invalid read of size 8
==31028==    at 0x109355: free_key_values (bug-program.c:43)[52;80H[K[52;80H146,10[8C63%[6;10H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31028==    by 0x109355: main (bug-program.c:74)
==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31028==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31028==    by 0x109354: free_key_values (bug-program.c:44)[52;80H[K[52;80H150,10[8C64%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x109354: main (bug-program.c:74)
==31028==  Block was alloc'd at
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H153,10[8C66%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H156,10[8C67%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
==31028==
==31028== 23 errors in context 2 of 8:[52;80H[K[52;80H159,10[8C68%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Invalid read of size 8
==31028==    at 0x109344: main (bug-program.c:71)
==31028==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H162,10[8C70%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H165,10[8C71%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: main (bug-program.c:70)
==31028==
==31028==[52;80H[K[52;80H168,10[8C72%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== 23 errors in context 3 of 8:
==31028== Invalid read of size 1
==31028==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[52;80H[K[52;80H171,10[8C74%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x48CC9EE: vfprintf (vfprintf.c:1638)
==31028==    by 0x48D3605: printf (printf.c:33)
==31028==    by 0x109343: main (bug-program.c:72)[52;80H[K[52;80H174,10[8C75%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==  Address 0x4a3fe58 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092F6: add_key_value (bug-program.c:24)[52;80H[K[52;80H177,10[8C77%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092F6: make_key_values (bug-program.c:61)
==31028==    by 0x1092F6: main (bug-program.c:70)
==31028==[52;80H[K[52;80H180,10[8C78%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
==31028== 23 errors in context 4 of 8:
==31028== Invalid read of size 4[52;80H[K[52;80H183,10[8C79%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    at 0x109330: main (bug-program.c:72)
==31028==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H186,10[8C81%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H189,10[8C82%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
==31028==
==31028== 23 errors in context 5 of 8:[52;80H[K[52;80H192,10[8C83%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Invalid write of size 8
==31028==    at 0x109315: add_key_value (bug-program.c:33)
==31028==    by 0x109315: make_key_values (bug-program.c:61)[52;80H[K[52;80H195,10[8C85%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x109315: main (bug-program.c:70)
==31028==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H198,10[8C86%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H201,10[8C87%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
==31028==
==31028== 23 errors in context 6 of 8:[52;80H[K[52;80H204,10[8C89%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Invalid write of size 4
==31028==    at 0x109312: add_key_value (bug-program.c:33)
==31028==    by 0x109312: make_key_values (bug-program.c:61)[52;80H[K[52;80H207,10[8C90%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x109312: main (bug-program.c:70)
==31028==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H210,10[8C91%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H213,10[8C93%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==
==31028==
==31028== 23 errors in context 7 of 8:[52;80H[K[52;80H216,10[8C94%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028== Invalid write of size 1
==31028==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==31028==    by 0x10930E: add_key_value (bug-program.c:30)[52;80H[K[52;80H219,10[8C95%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x10930E: make_key_values (bug-program.c:61)
==31028==    by 0x10930E: main (bug-program.c:70)
==31028==  Address 0x4a3f094 is 0 bytes after a block of size 4 alloc'd[52;80H[K[52;80H222,10[8C97%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31028==    by 0x1092F6: add_key_value (bug-program.c:24)
==31028==    by 0x1092F6: make_key_values (bug-program.c:61)[52;80H[K[52;80H225,10[8C98%[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31028==    by 0x1092F6: main (bug-program.c:70)
==31028==
==31028== ERROR SUMMARY: 162 errors from 8 contexts (suppressed: 0 from 0)[52;80H[K[52;80H228,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H231,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H234,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H237,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H240,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H243,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H246,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H249,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H252,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H255,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H258,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H261,10[8CBot[6;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x109312: main (bug-program.c:70)
==31028==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H261,10[8CBot[9;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028== Invalid write of size 4
==31028==    at 0x109312: add_key_value (bug-program.c:33)
==31028==    by 0x109312: make_key_values (bug-program.c:61)[52;80H[K[52;80H261,10[8CBot[12;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==
==31028==
==31028== 23 errors in context 6 of 8:[52;80H[K[52;80H261,10[8CBot[15;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x1092D3: add_key_value (bug-program.c:21)
==31028==    by 0x1092D3: make_key_values (bug-program.c:61)
==31028==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H261,10[8CBot[18;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==    by 0x109315: main (bug-program.c:70)
==31028==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31028==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H261,10[8CBot[21;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028== Invalid write of size 8
==31028==    at 0x109315: add_key_value (bug-program.c:33)
==31028==    by 0x109315: make_key_values (bug-program.c:61)[52;80H[K[52;80H261,10[8CBot[24;10H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31028==
==31028==
==31028== 23 errors in context 5 of 8:[52;80H[K[52;80H261,10[8CBot[27;10H[?25h[?25l[52;70H:[27;10H[52;70H[K[52;1H:[?2004h[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t[52;1H[K[52;1H[?2004l[?1l>[?25h[?1049l[23;0;0tqxiong1@remote05:~/i220b/work/lab6/bug-program$ vim bug-program.valgrind ls[Kls
bash: lsls: command not found
qxiong1@remote05:~/i220b/work/lab6/bug-program$ vim[K[K[Kls
bug-program  bug-program.c  bug-program.valgrind  Makefile
qxiong1@remote05:~/i220b/work/lab6/bug-program$ vim bug-program.valgrind 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;52r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[52;1H"bug-program.valgrind" 225L, 13573C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H==31256== Memcheck, a memory error detector
==31256== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==31256== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[4;1H==31256== Command: ./bug-program
==31256==
--31256-- Valgrind options:
--31256--    -v
--31256--    --leak-check=yes
--31256-- Contents of /proc/version:
--31256--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[11;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--31256--
--31256-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--31256-- Page sizes: currently 4096, max supported 4096
--31256-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--31256-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[17;1H-program
--31256-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--31256--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [20;1H..
--31256--   .. build-id is valid
--31256-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--31256--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [24;1H..
--31256--   .. build-id is valid
--31256--    object doesn't have a dynamic symbol table
--31256-- Scheduler: using generic scheduler lock implementation.
--31256-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==31256== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31256-by-qxiong1-on-???
==31256== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31256-by-qxiong1-on-???
==31256== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31256-by-qxiong1-on-???[32;1H==31256==
==31256== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31256== don't want to do, unless you know exactly what you're doing,
==31256== or are doing some strange experiment):
==31256==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=31256 ...command...
==31256==
==31256== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31256==   /path/to/gdb ./bug-program
==31256== and then give GDB the following command
==31256==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=31256
==31256== --pid is optional if only one valgrind process is running
==31256==
--31256-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[45;1Hlinux_REDIR_FOR_strlen)
--31256-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[47;1Hinux_REDIR_FOR_index)
--31256-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--31256--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [50;1H..
--31256--   .. build-id is valid[52;80H1,1[11CTop[1;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--31256--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [51;1H..[52;1H[K[52;80H9,1[12C1%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256--   .. build-id is valid
==31256== WARNING: new redirection conflicts with existing -- ignoring it
--31256--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H11,1[11C3%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[48;1H--31256--     old: 0x0401e2f0 (strlen              ) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[49;1HREDIR_FOR_strlen
--31256--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--31256-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)[52;80H[K[52;80H14,1[11C4%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--31256-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--31256--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [51;1H..[52;80H[K[52;80H17,1[11C6%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256--   .. build-id is valid
--31256-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H20,1[11C8%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H23,1[11C9%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H27,1[10C11%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H30,1[10C13%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H33,1[10C15%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[51;1Happer)[52;80H[K[52;80H36,1[10C16%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H39,1[10C18%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H41,1[10C19%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H43,1[10C21%[6;1H[?25h[?25l[1;51r[1;1H[5M[1;52r[47;1H--31256-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[51;1H)[52;80H[K[52;80H47,1[10C23%[7;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--31256-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--31256-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==31256== Invalid write of size 4[52;80H[K[52;80H50,1[10C25%[7;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==    at 0x10930E: add_key_value (bug-program.c:33)
==31256==    by 0x10930E: make_key_values (bug-program.c:61)
==31256==    by 0x10930E: main (bug-program.c:70)
==31256==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H53,1[10C26%[6;1H[?25h[?25l[52;70H[[6;1H[52;71H<[6;1H[52;72H6[6;1H[52;73H5[6;1H[52;74H;[6;1H[52;75H1[6;1H[52;76H9[6;1H[52;77H;[6;1H[52;78H3[6;1H[52;79H6[6;1H[52;70H          [6;1H[1;51r[1;1H[4M[1;52r[48;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H56,1[10C28%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==
==31256== Invalid write of size 8
==31256==    at 0x109311: add_key_value (bug-program.c:33)
==31256==    by 0x109311: make_key_values (bug-program.c:61)[52;80H[K[52;80H60,1[10C30%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x109311: main (bug-program.c:70)
==31256==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H63,1[10C32%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H66,1[10C34%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)[52;80H[K[52;80H69,1[10C35%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H72,1[10C37%[6;1H[?25h[?25l[52;70H^[[6;1H[52;72H[[6;1H[52;73H<[6;1H[52;74H6[6;1H[52;75H5[6;1H[52;76H;[6;1H[52;77H1[6;1H[52;78H9[6;1H[52;79H;[6;1H[52;70H[[<65;19;3[6;1H[52;70H          [6;1H[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H75,1[10C39%[7;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--31256-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
--31256-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (memp[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H77,1[10C40%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[47;1H--31256-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[48;1Hcpy)
==31256== Invalid read of size 8
==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H81,1[10C42%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H84,1[10C44%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
--31256-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H87,1[10C46%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Invalid read of size 8
==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)[52;80H[K[52;80H89,1[10C47%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)
==31256==    by 0x109350: main (bug-program.c:74)[52;80H[K[52;80H93,1[10C49%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H96,1[10C51%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H99,1[10C53%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== HEAP SUMMARY:
==31256==     in use at exit: 123 bytes in 23 blocks[52;80H[K[52;80H102,1[9C54%[6;1H[?25h[?25l[52;70H^[[6;1H[52;72H[[6;1H[52;73H<[6;1H[52;74H6[6;1H[52;75H5[6;1H[52;76H;[6;1H[52;70H       [6;1H[1;51r[1;1H[3M[1;52r[49;1H==31256==   total heap usage: 47 allocs, 24 frees, 1,331 bytes allocated
==31256==
==31256== Searching for pointers to 23 not-freed blocks[52;80H[K[52;80H105,1[9C56%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Checked 67,832 bytes
==31256==
==31256== 123 bytes in 23 blocks are definitely lost in loss record 1 of 1[52;80H[K[52;80H108,1[9C58%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092F2: add_key_value (bug-program.c:24)
==31256==    by 0x1092F2: make_key_values (bug-program.c:61)[52;80H[K[52;80H111,1[9C60%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092F2: main (bug-program.c:70)
==31256==
==31256== LEAK SUMMARY:[52;80H[K[52;80H114,1[9C61%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    definitely lost: 123 bytes in 23 blocks
==31256==    indirectly lost: 0 bytes in 0 blocks
==31256==      possibly lost: 0 bytes in 0 blocks[52;80H[K[52;80H117,1[9C63%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    still reachable: 0 bytes in 0 blocks
==31256==[9Csuppressed: 0 bytes in 0 blocks
==31256==[52;80H[K[52;80H120,1[9C65%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)
==31256==
==31256== 23 errors in context 1 of 6:[52;80H[K[52;80H122,1[9C66%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Invalid read of size 8
==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)[52;80H[K[52;80H125,1[9C68%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)
==31256==    by 0x109350: main (bug-program.c:74)[52;80H[K[52;80H129,1[9C70%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H132,1[9C72%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H135,1[9C74%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== 23 errors in context 2 of 6:
==31256== Invalid read of size 8[52;80H[K[52;80H138,1[9C75%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H141,1[9C77%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H144,1[9C79%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256==
==31256== 23 errors in context 3 of 6:[52;80H[K[52;80H147,1[9C81%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)
==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H150,1[9C82%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H153,1[9C84%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H156,1[9C86%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== 23 errors in context 4 of 6:
==31256== Invalid write of size 8
==31256==    at 0x109311: add_key_value (bug-program.c:33)[52;80H[K[52;80H159,1[9C87%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x109311: make_key_values (bug-program.c:61)
==31256==    by 0x109311: main (bug-program.c:70)
==31256==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H162,1[9C89%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H165,1[9C91%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H168,1[9C93%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== 23 errors in context 5 of 6:
==31256== Invalid write of size 4
==31256==    at 0x10930E: add_key_value (bug-program.c:33)[52;80H[K[52;80H171,1[9C94%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x10930E: make_key_values (bug-program.c:61)
==31256==    by 0x10930E: main (bug-program.c:70)
==31256==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H174,1[9C96%[6;1H[?25h[?25l[52;70H^[[6;1H[52;72H[[6;1H[52;73H<[6;1H[52;74H6[6;1H[52;75H5[6;1H[52;76H;[6;1H[52;70H       [6;1H[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H177,1[9C98%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)[52;80H[K[52;80H180,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H183,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H186,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H189,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H192,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H195,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H198,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H201,1[9CBot[6;1H[?25h[?25l[52;70H^[[6;1H[52;72H[[6;1H[52;73H<[6;1H[52;74H6[6;1H[52;75H5[6;1H[52;76H;[6;1H[52;70H       [6;1H[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H207,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H210,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H213,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H216,1[9CBot[6;1H[?25h[?25l[52;70H[[6;1H[52;71H<[6;1H[52;72H6[6;1H[52;73H5[6;1H[52;74H;[6;1H[52;75H1[6;1H[52;76H9[6;1H[52;77H;[6;1H[52;78H3[6;1H[52;79H6[6;1H[52;70H          [6;1H[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H219,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H222,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H225,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H225,1[9CBot[3;1H[?25h[?25l[1;51r[1;1H[2M[1;52r[50;1H[94m~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H225,1[9CBot[1;1H[?25h[?25l[?25h[?25l[52;70H^[[1;1H[52;72H[[1;1H[52;73H<[1;1H[52;74H6[1;1H[52;75H5[1;1H[52;76H;[1;1H[52;70H       [1;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H[[1;1H[52;71H<[1;1H[52;72H6[1;1H[52;73H5[1;1H[52;74H;[1;1H[52;75H1[1;1H[52;76H9[1;1H[52;77H;[1;1H[52;78H3[1;1H[52;79H6[1;1H[52;70H          [1;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H^[[1;1H[52;72H[[1;1H[52;73H<[1;1H[52;74H6[1;1H[52;75H5[1;1H[52;76H;[1;1H[52;77H1[1;1H[52;70H        [1;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H[[1;1H[52;71H<[1;1H[52;72H6[1;1H[52;73H5[1;1H[52;74H;[1;1H[52;75H1[1;1H[52;76H9[1;1H[52;77H;[1;1H[52;78H3[1;1H[52;79H6[1;1H[52;70H          [1;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[52;70H^[[1;1H[52;72H[[1;1H[52;73H<[1;1H[52;74H6[1;1H[52;75H5[1;1H[52;76H;[1;1H[52;70H       [1;1H[?25h[?25l[?25h[?25l[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H225,1[9CBot[4;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H225,1[9CBot[7;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x10930E: add_key_value (bug-program.c:33)
==31256==    by 0x10930E: make_key_values (bug-program.c:61)
==31256==    by 0x10930E: main (bug-program.c:70)[52;80H[K[52;80H225,1[9CBot[10;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== 23 errors in context 5 of 6:
==31256== Invalid write of size 4[52;80H[K[52;80H225,1[9CBot[13;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H225,1[9CBot[16;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H225,1[9CBot[19;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x109311: add_key_value (bug-program.c:33)
==31256==    by 0x109311: make_key_values (bug-program.c:61)
==31256==    by 0x109311: main (bug-program.c:70)[52;80H[K[52;80H225,1[9CBot[22;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== 23 errors in context 4 of 6:
==31256== Invalid write of size 8[52;80H[K[52;80H225,1[9CBot[25;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H225,1[9CBot[28;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H225,1[9CBot[31;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== 23 errors in context 3 of 6:
==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)[52;80H[K[52;80H225,1[9CBot[34;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H225,1[9CBot[37;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H225,1[9CBot[40;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Invalid read of size 8
==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H225,1[9CBot[43;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256==
==31256== 23 errors in context 2 of 6:[52;80H[K[52;80H225,1[9CBot[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H225,1[9CBot[49;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x109350: main (bug-program.c:74)
==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H219,1[9C99%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)[52;80H[K[52;80H216,1[9C97%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Invalid read of size 8
==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)[52;80H[K[52;80H213,1[9C95%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)
==31256==
==31256== 23 errors in context 1 of 6:[52;80H[K[52;80H210,1[9C94%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    still reachable: 0 bytes in 0 blocks
==31256==[9Csuppressed: 0 bytes in 0 blocks
==31256==[52;80H[K[52;80H207,1[9C92%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    definitely lost: 123 bytes in 23 blocks
==31256==    indirectly lost: 0 bytes in 0 blocks
==31256==      possibly lost: 0 bytes in 0 blocks[52;80H[K[52;80H204,1[9C90%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092F2: main (bug-program.c:70)
==31256==
==31256== LEAK SUMMARY:[52;80H[K[52;80H201,1[9C89%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092F2: add_key_value (bug-program.c:24)
==31256==    by 0x1092F2: make_key_values (bug-program.c:61)[52;80H[K[52;80H198,1[9C87%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Checked 67,832 bytes
==31256==
==31256== 123 bytes in 23 blocks are definitely lost in loss record 1 of 1[52;80H[K[52;80H195,1[9C85%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==   total heap usage: 47 allocs, 24 frees, 1,331 bytes allocated
==31256==
==31256== Searching for pointers to 23 not-freed blocks[52;80H[K[52;80H192,1[9C83%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== HEAP SUMMARY:
==31256==     in use at exit: 123 bytes in 23 blocks[52;80H[K[52;80H189,1[9C82%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H186,1[9C80%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H183,1[9C78%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)
==31256==    by 0x109350: main (bug-program.c:74)[52;80H[K[52;80H180,1[9C77%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd[52;80H[K[52;80H177,1[9C75%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
--31256-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)
==31256== Invalid read of size 8[52;80H[K[52;80H174,1[9C73%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H171,1[9C71%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H168,1[9C70%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
--31256-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[3;1Hcpy)
==31256== Invalid read of size 8[52;80H[K[52;80H164,1[9C68%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
--31256-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)[52;80H[K[52;80H161,1[9C66%[46;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== 23 errors in context 1 of 6:
==31256== Invalid read of size 8
==31256==    at 0x109351: free_key_values (bug-program.c:43)[52;80H[K[52;80H161,1[9C68%[43;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==    by 0x109351: main (bug-program.c:74)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)[52;80H[K[52;80H161,1[9C70%[39;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x109350: main (bug-program.c:74)
==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H161,1[9C71%[36;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H161,1[9C73%[33;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256==
==31256== 23 errors in context 2 of 6:[52;80H[K[52;80H161,1[9C75%[30;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Invalid read of size 8
==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H161,1[9C77%[27;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H161,1[9C78%[24;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H161,1[9C80%[21;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== 23 errors in context 3 of 6:
==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)[52;80H[K[52;80H161,1[9C82%[18;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H161,1[9C83%[15;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H161,1[9C85%[12;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== 23 errors in context 4 of 6:
==31256== Invalid write of size 8[52;80H[K[52;80H161,1[9C87%[9;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x109311: add_key_value (bug-program.c:33)
==31256==    by 0x109311: make_key_values (bug-program.c:61)
==31256==    by 0x109311: main (bug-program.c:70)[52;80H[K[52;80H161,1[9C89%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H164,1[9C90%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H167,1[9C92%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== 23 errors in context 5 of 6:
==31256== Invalid write of size 4[52;80H[K[52;80H170,1[9C94%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x10930E: add_key_value (bug-program.c:33)
==31256==    by 0x10930E: make_key_values (bug-program.c:61)
==31256==    by 0x10930E: main (bug-program.c:70)[52;80H[K[52;80H173,1[9C95%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H176,1[9C97%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H179,1[9C99%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)
[94m~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H182,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H185,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H188,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H191,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H194,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H197,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H200,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H203,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H206,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H209,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== 23 errors in context 4 of 6:
==31256== Invalid write of size 8[52;80H[K[52;80H209,1[9CBot[9;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H209,1[9CBot[12;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H209,1[9CBot[15;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== 23 errors in context 3 of 6:
==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)[52;80H[K[52;80H209,1[9CBot[18;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H209,1[9CBot[21;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H209,1[9CBot[24;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Invalid read of size 8
==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H209,1[9CBot[27;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256==
==31256== 23 errors in context 2 of 6:[52;80H[K[52;80H209,1[9CBot[30;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H209,1[9CBot[33;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x109350: main (bug-program.c:74)
==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H209,1[9C99%[36;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)[52;80H[K[52;80H209,1[9C97%[39;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Invalid read of size 8
==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)[52;80H[K[52;80H209,1[9C95%[42;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)
==31256==
==31256== 23 errors in context 1 of 6:[52;80H[K[52;80H209,1[9C94%[45;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    still reachable: 0 bytes in 0 blocks
==31256==[9Csuppressed: 0 bytes in 0 blocks
==31256==[52;80H[K[52;80H207,1[9C92%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    definitely lost: 123 bytes in 23 blocks
==31256==    indirectly lost: 0 bytes in 0 blocks
==31256==      possibly lost: 0 bytes in 0 blocks[52;80H[K[52;80H204,1[9C90%[46;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H204,1[9C92%[43;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== 23 errors in context 5 of 6:
==31256== Invalid write of size 4[52;80H[K[52;80H204,1[9C94%[40;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x10930E: add_key_value (bug-program.c:33)
==31256==    by 0x10930E: make_key_values (bug-program.c:61)
==31256==    by 0x10930E: main (bug-program.c:70)[52;80H[K[52;80H204,1[9C95%[37;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H204,1[9C97%[34;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H204,1[9C99%[31;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)
[94m~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[28;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[25;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[22;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[19;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[16;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[13;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[10;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[7;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H206,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H206,1[9CBot[9;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H206,1[9CBot[12;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== 23 errors in context 3 of 6:
==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)[52;80H[K[52;80H206,1[9CBot[15;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H206,1[9CBot[18;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H206,1[9CBot[21;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Invalid read of size 8
==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H206,1[9CBot[24;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256==
==31256== 23 errors in context 2 of 6:[52;80H[K[52;80H206,1[9CBot[27;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H206,1[9CBot[30;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x109350: main (bug-program.c:74)
==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H206,1[9C99%[33;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)[52;80H[K[52;80H206,1[9C97%[36;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Invalid read of size 8
==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)[52;80H[K[52;80H206,1[9C95%[39;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)
==31256==
==31256== 23 errors in context 1 of 6:[52;80H[K[52;80H206,1[9C94%[42;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    still reachable: 0 bytes in 0 blocks
==31256==[9Csuppressed: 0 bytes in 0 blocks
==31256==[52;80H[K[52;80H206,1[9C92%[45;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    definitely lost: 123 bytes in 23 blocks
==31256==    indirectly lost: 0 bytes in 0 blocks
==31256==      possibly lost: 0 bytes in 0 blocks[52;80H[K[52;80H204,1[9C90%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092F2: main (bug-program.c:70)
==31256==
==31256== LEAK SUMMARY:[52;80H[K[52;80H201,1[9C89%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092F2: add_key_value (bug-program.c:24)
==31256==    by 0x1092F2: make_key_values (bug-program.c:61)[52;80H[K[52;80H198,1[9C87%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Checked 67,832 bytes
==31256==
==31256== 123 bytes in 23 blocks are definitely lost in loss record 1 of 1[52;80H[K[52;80H195,1[9C85%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==   total heap usage: 47 allocs, 24 frees, 1,331 bytes allocated
==31256==
==31256== Searching for pointers to 23 not-freed blocks[52;80H[K[52;80H192,1[9C83%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== HEAP SUMMARY:
==31256==     in use at exit: 123 bytes in 23 blocks[52;80H[K[52;80H189,1[9C82%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H186,1[9C80%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H183,1[9C78%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)
==31256==    by 0x109350: main (bug-program.c:74)[52;80H[K[52;80H180,1[9C77%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd[52;80H[K[52;80H177,1[9C75%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
--31256-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)
==31256== Invalid read of size 8[52;80H[K[52;80H174,1[9C73%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H171,1[9C71%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H168,1[9C70%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
--31256-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[3;1Hcpy)
==31256== Invalid read of size 8[52;80H[K[52;80H164,1[9C68%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
--31256-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)[52;80H[K[52;80H161,1[9C66%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H158,1[9C64%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)
==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H155,1[9C62%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H152,1[9C61%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H149,1[9C59%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x109311: add_key_value (bug-program.c:33)
==31256==    by 0x109311: make_key_values (bug-program.c:61)
==31256==    by 0x109311: main (bug-program.c:70)[52;80H[K[52;80H146,1[9C57%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256== Invalid write of size 8[52;80H[K[52;80H143,1[9C56%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H140,1[9C54%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x10930E: make_key_values (bug-program.c:61)
==31256==    by 0x10930E: main (bug-program.c:70)
==31256==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H137,1[9C52%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==31256== Invalid write of size 4
==31256==    at 0x10930E: add_key_value (bug-program.c:33)[52;80H[K[52;80H134,1[9C50%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[2;1H)
--31256-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--31256-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)[52;80H[K[52;80H130,1[9C48%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H127,1[9C47%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H124,1[9C45%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H121,1[9C43%[45;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H119,1[9C42%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[4;1Happer)[52;80H[K[52;80H115,1[9C40%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H112,1[9C38%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H109,1[9C36%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H106,1[9C35%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H103,1[9C33%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H100,1[9C31%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [2;1H..
--31256--   .. build-id is valid
--31256-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H96,1[10C29%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--31256-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--31256-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so[52;80H[K[52;80H93,1[10C28%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H==31256== WARNING: new redirection conflicts with existing -- ignoring it
--31256--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[3;1HREDIR_FOR_strlen
--31256--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen[52;80H[K[52;80H89,1[10C26%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--31256--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [3;1H..
--31256--   .. build-id is valid[52;80H[K[52;80H86,1[10C24%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--31256--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug  [3;1H..
--31256--   .. build-id is valid[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H81,1[10C22%[45;1H[?25h[?25l[1;51r[1;1H[5L[1;52r[1;1H==31256==
--31256-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64__[3;1Hlinux_REDIR_FOR_strlen)
--31256-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_ll[5;1Hinux_REDIR_FOR_index)[52;80H[K[52;80H77,1[10C20%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== and then give GDB the following command
==31256==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=31256
==31256== --pid is optional if only one valgrind process is running[52;80H[K[52;80H74,1[10C19%[45;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31256==   /path/to/gdb ./bug-program[52;80H[K[52;80H72,1[10C17%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== don't want to do, unless you know exactly what you're doing,
==31256== or are doing some strange experiment):
==31256==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=31256 ...command...[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H68,1[10C16%[45;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31256-by-qxiong1-on-???[2;1H==31256==
==31256== TO CONTROL THIS PROCESS USING vgdb (which you probably[52;80H[K[52;80H66,1[10C14%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==31256== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31256-by-qxiong1-on-???
==31256== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31256-by-qxiong1-on-???[52;80H[K[52;80H63,1[10C12%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256--   .. build-id is valid
--31256--    object doesn't have a dynamic symbol table
--31256-- Scheduler: using generic scheduler lock implementation.[52;80H[K[52;80H60,1[10C11%[46;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256--   .. build-id is valid
--31256-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--31256--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug  [4;1H..[52;80H[K[52;80H56,1[11C9%[46;1H[?25h[?25l[1;51r[1;1H[5L[1;52r[1;1H--31256-- Reading syms from /import/linux/home1/qxiong1/git-repos/i220b/work/lab6/bug-program/bugg[2;1H-program
--31256-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--31256--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug  [5;1H..[52;80H[K[52;80H52,1[11C7%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--31256-- Page sizes: currently 4096, max supported 4096
--31256-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H48,1[11C6%[44;1H[?25h[?25l[1;51r[1;1H[4L[1;52r[1;1H--31256-- Contents of /proc/version:
--31256--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debb[3;1Hian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--31256--[52;80H[K[52;80H46,1[11C4%[45;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H--31256-- Valgrind options:
--31256--    -v
--31256--    --leak-check=yes[52;80H[K[52;80H44,1[11C2%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info[2;1H==31256== Command: ./bug-program
==31256==[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H41,1[11C1%[44;1H[?25h[?25l[1;51r[1;1H[2L[1;52r[1;1H==31256== Memcheck, a memory error detector
==31256== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.[52;80H[K[52;80H40,1[10CTop[44;1H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--31256--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug  [51;1H..[52;80H[K[52;80H40,1[11C1%[41;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256--   .. build-id is valid
==31256== WARNING: new redirection conflicts with existing -- ignoring it
--31256--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H40,1[11C3%[38;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[48;1H--31256--     old: 0x0401e2f0 (strlen              ) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux__[49;1HREDIR_FOR_strlen
--31256--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--31256-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)[52;80H[K[52;80H40,1[11C4%[35;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--31256-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--31256--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug  [51;1H..[52;80H[K[52;80H40,1[11C6%[31;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256--   .. build-id is valid
--31256-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,1[11C8%[27;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,1[11C9%[23;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,1[10C11%[19;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,1[10C13%[16;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,1[10C15%[13;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrr[51;1Happer)[52;80H[K[52;80H40,1[10C16%[10;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H40,1[10C18%[7;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H41,1[10C19%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)[52;80H[K[52;80H43,1[10C21%[6;1H[?25h[?25l[1;51r[1;1H[5M[1;52r[47;1H--31256-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--31256-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapperr[51;1H)[52;80H[K[52;80H47,1[10C23%[7;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H--31256-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--31256-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--31256-- REDIR: 0x4918100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==31256== Invalid write of size 4[52;80H[K[52;80H50,1[10C25%[7;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==    at 0x10930E: add_key_value (bug-program.c:33)
==31256==    by 0x10930E: make_key_values (bug-program.c:61)
==31256==    by 0x10930E: main (bug-program.c:70)
==31256==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H53,1[10C26%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H56,1[10C28%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==
==31256== Invalid write of size 8
==31256==    at 0x109311: add_key_value (bug-program.c:33)
==31256==    by 0x109311: make_key_values (bug-program.c:61)[52;80H[K[52;80H60,1[10C30%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x109311: main (bug-program.c:70)
==31256==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H63,1[10C32%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H66,1[10C34%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)[52;80H[K[52;80H69,1[10C35%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H72,1[10C37%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H75,1[10C39%[7;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H--31256-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
--31256-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
--31256-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (memp[51;1H[94m@@@                                                                                              [m[52;80H[K[52;80H77,1[10C40%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[47;1H--31256-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempp[48;1Hcpy)
==31256== Invalid read of size 8
==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H81,1[10C42%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H84,1[10C44%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
--31256-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)[52;80H[K[52;80H87,1[10C46%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Invalid read of size 8
==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)[52;80H[K[52;80H89,1[10C47%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)
==31256==    by 0x109350: main (bug-program.c:74)[52;80H[K[52;80H93,1[10C49%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H96,1[10C51%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H99,1[10C53%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== HEAP SUMMARY:
==31256==     in use at exit: 123 bytes in 23 blocks[52;80H[K[52;80H102,1[9C54%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==   total heap usage: 47 allocs, 24 frees, 1,331 bytes allocated
==31256==
==31256== Searching for pointers to 23 not-freed blocks[52;80H[K[52;80H105,1[9C56%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Checked 67,832 bytes
==31256==
==31256== 123 bytes in 23 blocks are definitely lost in loss record 1 of 1[52;80H[K[52;80H108,1[9C58%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092F2: add_key_value (bug-program.c:24)
==31256==    by 0x1092F2: make_key_values (bug-program.c:61)[52;80H[K[52;80H111,1[9C60%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092F2: main (bug-program.c:70)
==31256==
==31256== LEAK SUMMARY:[52;80H[K[52;80H114,1[9C61%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    definitely lost: 123 bytes in 23 blocks
==31256==    indirectly lost: 0 bytes in 0 blocks
==31256==      possibly lost: 0 bytes in 0 blocks[52;80H[K[52;80H117,1[9C63%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    still reachable: 0 bytes in 0 blocks
==31256==[9Csuppressed: 0 bytes in 0 blocks
==31256==[52;80H[K[52;80H120,1[9C65%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)
==31256==
==31256== 23 errors in context 1 of 6:[52;80H[K[52;80H122,1[9C66%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Invalid read of size 8
==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)[52;80H[K[52;80H125,1[9C68%[6;1H[?25h[?25l[1;51r[1;1H[4M[1;52r[48;1H==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd
==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)
==31256==    by 0x109350: main (bug-program.c:74)[52;80H[K[52;80H129,1[9C70%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H132,1[9C72%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H135,1[9C74%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256== 23 errors in context 2 of 6:
==31256== Invalid read of size 8[52;80H[K[52;80H138,1[9C75%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H141,1[9C77%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H144,1[9C79%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==
==31256==
==31256== 23 errors in context 3 of 6:[52;80H[K[52;80H147,1[9C81%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)
==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H150,1[9C82%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H153,1[9C84%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H156,1[9C86%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== 23 errors in context 4 of 6:
==31256== Invalid write of size 8
==31256==    at 0x109311: add_key_value (bug-program.c:33)[52;80H[K[52;80H159,1[9C87%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x109311: make_key_values (bug-program.c:61)
==31256==    by 0x109311: main (bug-program.c:70)
==31256==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H162,1[9C89%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H165,1[9C91%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H168,1[9C93%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256== 23 errors in context 5 of 6:
==31256== Invalid write of size 4
==31256==    at 0x10930E: add_key_value (bug-program.c:33)[52;80H[K[52;80H171,1[9C94%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x10930E: make_key_values (bug-program.c:61)
==31256==    by 0x10930E: main (bug-program.c:70)
==31256==  Address 0x4a3f048 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H174,1[9C96%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H177,1[9C98%[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)[52;80H[K[52;80H180,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H183,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H186,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H189,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H192,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H195,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H198,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H201,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H204,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H207,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H210,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H[94m~                                                                                                [50;1H~                                                                                                [51;1H~                                                                                                [m[52;80H[K[52;80H213,1[9CBot[6;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x109311: make_key_values (bug-program.c:61)
==31256==    by 0x109311: main (bug-program.c:70)
==31256==  Address 0x4a3f050 is 8 bytes after a block of size 8 alloc'd[52;80H[K[52;80H213,1[9CBot[9;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== 23 errors in context 4 of 6:
==31256== Invalid write of size 8
==31256==    at 0x109311: add_key_value (bug-program.c:33)[52;80H[K[52;80H213,1[9CBot[12;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H213,1[9CBot[15;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H213,1[9CBot[18;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== Invalid read of size 4
==31256==    at 0x10932C: main (bug-program.c:72)
==31256==  Address 0x4a3fe08 is 0 bytes after a block of size 8 alloc'd[52;80H[K[52;80H213,1[9CBot[21;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256==
==31256== 23 errors in context 3 of 6:[52;80H[K[52;80H213,1[9CBot[24;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H213,1[9CBot[27;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x109340: main (bug-program.c:71)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 alloc'd
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H213,1[9CBot[30;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== 23 errors in context 2 of 6:
==31256== Invalid read of size 8[52;80H[K[52;80H213,1[9CBot[33;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==[52;80H[K[52;80H213,1[9CBot[36;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==  Block was alloc'd at
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)[52;80H[K[52;80H213,1[9CBot[39;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x48369AB: free (vg_replace_malloc.c:530)
==31256==    by 0x109350: free_key_values (bug-program.c:44)
==31256==    by 0x109350: main (bug-program.c:74)[52;80H[K[52;80H213,1[9C98%[42;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x109351: free_key_values (bug-program.c:43)
==31256==    by 0x109351: main (bug-program.c:74)
==31256==  Address 0x4a3fe10 is 8 bytes after a block of size 8 free'd[52;80H[K[52;80H213,1[9C96%[45;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== 23 errors in context 1 of 6:
==31256== Invalid read of size 8[52;80H[K[52;80H211,1[9C94%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==[9Csuppressed: 0 bytes in 0 blocks
==31256==
==31256== ERROR SUMMARY: 116 errors from 6 contexts (suppressed: 0 from 0)[52;80H[K[52;80H208,1[9C93%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    indirectly lost: 0 bytes in 0 blocks
==31256==      possibly lost: 0 bytes in 0 blocks
==31256==    still reachable: 0 bytes in 0 blocks[52;80H[K[52;80H205,1[9C91%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== LEAK SUMMARY:
==31256==    definitely lost: 123 bytes in 23 blocks[52;80H[K[52;80H202,1[9C89%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092F2: add_key_value (bug-program.c:24)
==31256==    by 0x1092F2: make_key_values (bug-program.c:61)
==31256==    by 0x1092F2: main (bug-program.c:70)[52;80H[K[52;80H199,1[9C87%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== 123 bytes in 23 blocks are definitely lost in loss record 1 of 1
==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)[52;80H[K[52;80H196,1[9C86%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==
==31256== Searching for pointers to 23 not-freed blocks
==31256== Checked 67,832 bytes[52;80H[K[52;80H193,1[9C84%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256== HEAP SUMMARY:
==31256==     in use at exit: 123 bytes in 23 blocks
==31256==   total heap usage: 47 allocs, 24 frees, 1,331 bytes allocated[52;80H[K[52;80H190,1[9C82%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x1092D3: main (bug-program.c:70)
==31256==
==31256==[52;80H[K[52;80H187,1[9C81%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)[52;80H[K[52;80H184,1[9C79%[46;1H[?25h[?25l[1;51r[1;1H[3L[1;52r[1;1H==31256==    by 0x109350: free_key_values (bug-program.c:44)
==31256==    by 0x109350: main (bug-program.c:74)
==31256==  Block was alloc'd at[52;80H[K[52;80H181,1[9C77%[46;1H[?25h[?25l[1;51r[1;1H[3M[1;52r[49;1H==31256==    by 0x1092D3: add_key_value (bug-program.c:21)
==31256==    by 0x1092D3: make_key_values (bug-program.c:61)
==31256==    by 0x1092D3: main (bug-program.c:70)[52;80H[K[52;80H181,1[9C79%[43;1H[?25h[?25l[52;81H71,30[33;30H[?25h[?25l[52;70H2[33;31H[47mi[m[52;1H[1m-- VISUAL --[m[52;70H[K[52;70H2[33;31H[52;80H171,31[8C79%[33;31H[?25h[?25l[52;70H3[33;32H[47ms[m[52;85H2[33;32H[?25h[?25l[52;70H4[33;33H[47m [m[52;85H3[33;33H[?25h[?25l[52;70H5[33;34H[47m8[m[52;85H4[33;34H[?25h[?25l[52;70H6[33;35H[47m [m[52;85H5[